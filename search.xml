<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>argo-combined-demo</title>
    <url>/posts/612a1ead/</url>
    <content><![CDATA[<blockquote>
<p>Automation of Every - How To combine Argo Events, Workflow &amp; CD</p>
</blockquote>
<span id="more"></span>

<ul>
<li><a href="#%E9%83%A8%E7%BD%B2argo-workflow">部署argo workflow</a></li>
<li><a href="#%E9%83%A8%E7%BD%B2argo-events">部署argo events</a><ul>
<li><a href="#create-the-ns">Create the ns</a></li>
<li><a href="#deploy-argo-events-sa-clusterroles-sensor-controller-eventbus-controller-and-eventsource-controller">Deploy Argo Events, SA, ClusterRoles, Sensor Controller, EventBus Controller and EventSource Controller</a></li>
<li><a href="#deploy-the-eventbus">Deploy the eventbus</a></li>
<li><a href="#create-serviceaccount-to-trigger-workflows">Create ServiceAccount to trigger workflows</a></li>
<li><a href="#create-the-webhook-event-source">Create the webhook event source</a></li>
<li><a href="#create-the-webhook-sensor">Create the webhook sensor</a></li>
</ul>
</li>
<li><a href="#%E9%83%A8%E7%BD%B2argo-cd">部署argo cd</a></li>
</ul>
<h2 id="部署argo-workflow"><a href="#部署argo-workflow" class="headerlink" title="部署argo workflow"></a>部署argo workflow</h2><blockquote>
<p>云原生工作流引擎，专注于任务编排</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在argo-events namespace中创建argo workflow服务</span></span><br><span class="line">kubectl create ns argo-events</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载argo-workflow资源文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改资源文件中RoleBinding和ClusterRoleBinding的namespace argo为argo-events</span></span><br><span class="line">wget https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml</span><br><span class="line">kubectl apply -n argo-events -f quick-start-postgres.yaml</span><br></pre></td></tr></table></figure>
<h2 id="部署argo-events"><a href="#部署argo-events" class="headerlink" title="部署argo events"></a>部署argo events</h2><blockquote>
<p>云原生的事件驱动架构<br>部署argo events之前确保workflow已经可以工作</p>
</blockquote>
<h3 id="Create-the-ns"><a href="#Create-the-ns" class="headerlink" title="Create the ns"></a>Create the ns</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Create the ns</span></span><br><span class="line">kubectl create namespace argo-events</span><br></pre></td></tr></table></figure>
<h3 id="Deploy-Argo-Events-SA-ClusterRoles-Sensor-Controller-EventBus-Controller-and-EventSource-Controller"><a href="#Deploy-Argo-Events-SA-ClusterRoles-Sensor-Controller-EventBus-Controller-and-EventSource-Controller" class="headerlink" title="Deploy Argo Events, SA, ClusterRoles, Sensor Controller, EventBus Controller and EventSource Controller"></a>Deploy Argo Events, SA, ClusterRoles, Sensor Controller, EventBus Controller and EventSource Controller</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> Install with a validating admission controller</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install-validating-webhook.yaml</span><br></pre></td></tr></table></figure>
<h3 id="Deploy-the-eventbus"><a href="#Deploy-the-eventbus" class="headerlink" title="Deploy the eventbus"></a>Deploy the eventbus</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/eventbus/native.yaml</span><br></pre></td></tr></table></figure>
<h3 id="Create-ServiceAccount-to-trigger-workflows"><a href="#Create-ServiceAccount-to-trigger-workflows" class="headerlink" title="Create ServiceAccount to trigger workflows"></a>Create ServiceAccount to trigger workflows</h3><details>
<summary>service-account.yaml</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Similarly you can use a ClusterRole and ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">argoproj.io</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">workflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">workflowtemplates</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cronworkflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">clusterworkflowtemplates</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">operate-workflow-sa</span></span><br></pre></td></tr></table></figure>
</details>

<h3 id="Create-the-webhook-event-source"><a href="#Create-the-webhook-event-source" class="headerlink" title="Create the webhook event source"></a>Create the webhook event source</h3><blockquote>
<p>官方不建议直接使用spec.service暴露服务，这个只是为了测试使用</p>
</blockquote>
<details>
<summary>event-source-example.yaml</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EventSource</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line">        <span class="attr">targetPort:</span> <span class="number">12000</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="comment"># event-source can run multiple HTTP servers. Simply define a unique port to start a new HTTP server</span></span><br><span class="line">    <span class="attr">example:</span></span><br><span class="line">      <span class="comment"># port to run HTTP server on</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">&quot;12000&quot;</span></span><br><span class="line">      <span class="comment"># endpoint to listen to</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">/example</span></span><br><span class="line">      <span class="comment"># HTTP request method to allow. In this case, only POST requests are accepted</span></span><br><span class="line">      <span class="attr">method:</span> <span class="string">POST</span></span><br></pre></td></tr></table></figure>
</details>
<details>
<summary>event-source.yaml & event-source-svc.yaml</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EventSource</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">gitlab-example:</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">&quot;13000&quot;</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">/webhook</span></span><br><span class="line">      <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-webhook</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">eventsource-name:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">13000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">13000</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<h3 id="Create-the-webhook-sensor"><a href="#Create-the-webhook-sensor" class="headerlink" title="Create the webhook sensor"></a>Create the webhook sensor</h3><blockquote>
<p>senor可以定义一系列的triggers,例如k8s资源对象(eg:workflow对象本身) <a href="https://github.com/argoproj/argo-events/blob/master/api/sensor.md">sensor-api</a><br>示例2可以将资源文件与代码一起提交至代码库,方便进行回归测试,也可以查看不同时期workflow的差异</p>
</blockquote>
<details>
<summary>示例1: 完整的workflow对象</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sensor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">serviceAccountName:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-dep</span></span><br><span class="line">      <span class="attr">eventSourceName:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">      <span class="attr">eventName:</span> <span class="string">gitlab-example</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitlab-workflow-trigger</span></span><br><span class="line">        <span class="attr">k8s:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">argoproj.io</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">workflows</span></span><br><span class="line">          <span class="attr">operation:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">source:</span></span><br><span class="line">            <span class="attr">resource:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line">              <span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line">              <span class="attr">metadata:</span></span><br><span class="line">                <span class="attr">generateName:</span> <span class="string">gitlab-workflow-</span></span><br><span class="line">              <span class="attr">spec:</span></span><br><span class="line">                <span class="attr">entrypoint:</span> <span class="string">argo-ci</span></span><br><span class="line">                <span class="attr">arguments:</span></span><br><span class="line">                  <span class="attr">parameters:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                      <span class="attr">value:</span> <span class="string">http://172.16.20.150/root/vue_todolist.git</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                      <span class="attr">value:</span> <span class="string">main</span></span><br><span class="line">                <span class="attr">templates:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">argo-ci</span></span><br><span class="line">                    <span class="attr">steps:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">                          <span class="attr">template:</span> <span class="string">checkout</span></span><br><span class="line">                          <span class="attr">arguments:</span></span><br><span class="line">                            <span class="attr">parameters:</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                                <span class="attr">value:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;workflow.parameters.repo&#125;&#125;</span>&quot;</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                                <span class="attr">value:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;workflow.parameters.revision&#125;&#125;</span>&quot;</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">                          <span class="attr">template:</span> <span class="string">build</span></span><br><span class="line">                          <span class="attr">arguments:</span></span><br><span class="line">                            <span class="attr">artifacts:</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                                <span class="attr">from:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;steps.checkout.outputs.artifacts.source&#125;&#125;</span>&quot;</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">                    <span class="attr">inputs:</span></span><br><span class="line">                      <span class="attr">parameters:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                          <span class="attr">git:</span></span><br><span class="line">                            <span class="attr">repo:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;inputs.parameters.repo&#125;&#125;</span>&quot;</span></span><br><span class="line">                            <span class="attr">revision:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;inputs.parameters.revision&#125;&#125;</span>&quot;</span></span><br><span class="line">                    <span class="attr">outputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">container:</span></span><br><span class="line">                      <span class="attr">image:</span> <span class="string">my-ubuntu:v0.1</span></span><br><span class="line">                      <span class="attr">command:</span> [<span class="string">sh</span>, <span class="string">-c</span>]</span><br><span class="line">                      <span class="attr">args:</span> [<span class="string">&quot;cd /src &amp;&amp; git status &amp;&amp; ls -l&quot;</span>]</span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">                    <span class="attr">inputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">outputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">container:</span></span><br><span class="line">                      <span class="attr">image:</span> <span class="string">my-ubuntu:v0.1</span></span><br><span class="line">                      <span class="attr">command:</span> [<span class="string">sh</span>, <span class="string">-c</span>]</span><br><span class="line">                      <span class="attr">args:</span> [</span><br><span class="line">                          <span class="string">&quot;</span></span><br><span class="line"><span class="string">                          cd /src &amp;&amp;</span></span><br><span class="line"><span class="string">                          npm install --registry https://registry.npm.taobao.org &amp;&amp;</span></span><br><span class="line"><span class="string">                          npm run build</span></span><br><span class="line"><span class="string">                          &quot;</span>,</span><br><span class="line">                        ]</span><br><span class="line">          <span class="attr">parameters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.0.value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.1.value</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>示例2: 访问git仓库中的资源文件</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sensor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">serviceAccountName:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-dep</span></span><br><span class="line">      <span class="attr">eventSourceName:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">      <span class="attr">eventName:</span> <span class="string">gitlab-example</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitlab-workflow-trigger</span></span><br><span class="line">        <span class="attr">k8s:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">argoproj.io</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">workflows</span></span><br><span class="line">          <span class="attr">operation:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">source:</span></span><br><span class="line">            <span class="attr">git:</span></span><br><span class="line">              <span class="attr">filePath:</span> <span class="string">&quot;workflow/gitlab.yaml&quot;</span></span><br><span class="line">          <span class="attr">parameters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.0.value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.1.value</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.url</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.ref</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<h2 id="部署argo-cd"><a href="#部署argo-cd" class="headerlink" title="部署argo cd"></a>部署argo cd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create namespace argocd</span><br><span class="line">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</span><br><span class="line">kubectl patch svc argocd-server -n argocd -p &#x27;&#123;&quot;spec&quot;: &#123;&quot;type&quot;: &quot;LoadBalancer&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Argo</category>
      </categories>
      <tags>
        <tag>Argo</tag>
      </tags>
  </entry>
  <entry>
    <title>Go|fmt使用</title>
    <url>/posts/2dd94f98/</url>
    <content><![CDATA[<p>fmt是Go中最常用的包之一，主要实现了格式化I/O(输入/输出)。</p>
<span id="more"></span>
<p>fmt包大致分为输出和输入的两大部分。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><p>输出部分包括三个系列和一个独立的函数：Print系列，Fprint系列，Sprint系列，以及Errorf()。这些函数的使用场景如下：</p>
<ul>
<li>向终端输出一些信息的时候，使用Print系列。（使用程度：频繁）</li>
<li>将信息写入文件中时，使用Fprint系列。（使用程度：一般）</li>
<li>在程序中获取格式化字符串中时，使用Sprint系列。（使用程度：一般）</li>
<li>在程序中获取包含格式化字符串的错误时，使用Errorf()。（使用程度：几乎不）</li>
</ul>
<h3 id="Print系列"><a href="#Print系列" class="headerlink" title="Print系列"></a>Print系列</h3><p>Print系列中包含三个重要的函数：Print()，Printf()，Println()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>Print()将参数的内容进行标准输出，而Println()则是在标准输出后进行换行。（Println()中的ln意思为line）<br>让我们来测试一下这两个函数。第一次展示程序的所有内容，后面则会省略。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;test Println&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">string</span> = <span class="string">&quot;test Print&quot;</span></span><br><span class="line">    fmt.Print(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终端输出的结果为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">test Println   <span class="comment">//换行</span></span><br><span class="line">test Print</span><br><span class="line"><span class="string">``</span><span class="string">`     </span></span><br><span class="line"><span class="string">再来看一下Printf()。Printf()用于格式化字符串的输出。举个例子：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">var</span> date <span class="keyword">string</span> = <span class="string">&quot;20200408&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;今天的日期是：%s&quot;</span>, date)</span><br></pre></td></tr></table></figure>
<p>注意，这里的%s代表字符串的占位符，目的是为了告诉程序将date变量的代入位置。计算结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">今天的日期是：20200408</span><br></pre></td></tr></table></figure>

<h3 id="Fprint系列"><a href="#Fprint系列" class="headerlink" title="Fprint系列"></a>Fprint系列</h3><p>Fprint系列包含三个函数：Fprint(),Fprintf(),Fprintln()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>Fprint系列与Print系列相比多了一个io.Writer接口类型的参数w。Fprint系列函数会将内容输出到参数w中。只要参数类型实现了io.Writer接口，则都可以实现写入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开xx.txt文件</span></span><br><span class="line">fileObj, err := os.OpenFile(<span class="string">&quot;./xx.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;打开文件错误：err:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s := <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">// 向打开的文件中写入格式化字符串</span></span><br><span class="line">fmt.Fprintf(fileObj, <span class="string">&quot;往文件中写如信息：%s&quot;</span>, s)</span><br></pre></td></tr></table></figure>
<p>实际上，Print系列其实就是通过封装了Fprint系列来实现的。Print()的源代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Fprint(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用Print()后返回了一个Fprint()，而os.Stdout代表标准输出。因此我们可以用Fprint()来实现与Print()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;test Fprint&quot;</span></span><br><span class="line">fmt.Fprintln(os.Stdout, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//test Fprint</span></span><br></pre></td></tr></table></figure>

<h3 id="Sprint系列"><a href="#Sprint系列" class="headerlink" title="Sprint系列"></a>Sprint系列</h3><p>Sprint系列函数会把传入的参数生成并返回一个字符串。<br>Sprint系列包含三个函数：Sprint(),Sprintf(),Sprintln()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprint</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure>
<p>Sprint系列与Print系列的区别在于输出的对象不同，Sprint系列的输出对象为字符串。利用time包，举一个输出日期和时间的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">year, month, day := time.Now().Date()</span><br><span class="line">hour, min, sec := time.Now().Clock()</span><br><span class="line"><span class="comment">//将格式化字符串写入变量s1中</span></span><br><span class="line">s1 := fmt.Sprintf(<span class="string">&quot;今天的日期的是：%d年%d月%d日，现在的时间是：%d:%d:%d\n&quot;</span>,year,month,day,hour,min,sec)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//今天的日期的是：2020年4月8日，现在的时间是：22:23:39</span></span><br></pre></td></tr></table></figure>

<h3 id="Errorf函数"><a href="#Errorf函数" class="headerlink" title="Errorf函数"></a>Errorf函数</h3><p>Errorf()根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">error := <span class="string">&quot;未知&quot;</span></span><br><span class="line">err := fmt.Errorf(<span class="string">&quot;这个错误类型为：%s&quot;</span>, error)</span><br><span class="line">fmt.Println(err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//这个错误类型为：未知</span></span><br></pre></td></tr></table></figure>
<p>它的底层是通过error包的new()中传入Sprintf()来实现的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(Sprintf(format, a...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这也就是为什么Errorf()没有它的兄弟Error()和Errorln()的原因了。因为我们可以直接通过errors.New()来生成一个非格式化字符串的错误。</p>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
  </entry>
  <entry>
    <title>for循环中i++和++i的区别和效率</title>
    <url>/posts/2e389ba/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在看到一些书籍和视频中发现for循环里面有写++i,而不是i++</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>for(A,B,C){<br>  D<br>}<br>执行顺序:</p>
<ol>
<li>进入循环执行A</li>
<li>执行B</li>
<li>执行D</li>
<li>执行C</li>
<li>再B，再D，再C直至退出循环</li>
</ol>
<p>即可知上述循环等同于:<br>for(A,B,){<br>  D<br>  C<br>}</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>i++</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<p>++i</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">j = i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>

<p>从上述差别中可以看到是有效率上面的差别</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>关联数组详解</title>
    <url>/posts/485233ea/</url>
    <content><![CDATA[<h1 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h1><p>　　请记住,数组是对象的特殊形式。使用方括号访问数组元素就像使用方括号访问对象的属性一样。JavaScript将指定的数字索引值转换成字符串—-索引值1变成”1”—-然后将其作为属性名来使用。<br>　　数组的特别之处在于，当使用小于2^32的非负整数作为属性名时数组会自动维护其length属性值。<br>　　注意，可以使用负数和非整数来索引数组。这种情况加，数值转换为字符串，字符串作为属性名来用。既然名字不是非负整数，它就只能当做常规的对象属性，而非数组的索引。</p>
<p>–以上摘抄&lt;Javascript权威指南&gt;</p>
<span id="more"></span>

<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="稀松数组"><a href="#稀松数组" class="headerlink" title="稀松数组"></a>稀松数组</h2><p>稀松数组就是包含从0开始的不联系索引的数组。<br><code>简单来说就是数组元素的个数和数组长度不一致</code></p>
<h2 id="密集数组"><a href="#密集数组" class="headerlink" title="密集数组"></a>密集数组</h2><h2 id="关联数组-数组下标为字符串"><a href="#关联数组-数组下标为字符串" class="headerlink" title="关联数组(数组下标为字符串)"></a>关联数组(数组下标为字符串)</h2><h2 id="关联数组-数组下标为数值-即通常情况下所说的数组"><a href="#关联数组-数组下标为数值-即通常情况下所说的数组" class="headerlink" title="关联数组(数组下标为数值,即通常情况下所说的数组)"></a>关联数组(数组下标为数值,即通常情况下所说的数组)</h2><h1 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h1><h2 id="如何创建数组"><a href="#如何创建数组" class="headerlink" title="如何创建数组"></a>如何创建数组</h2><h3 id="稀松数组-1"><a href="#稀松数组-1" class="headerlink" title="稀松数组"></a>稀松数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式生成稀松数组</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// 数组没有元素，但是length为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式生成稀松数组</span></span><br><span class="line"><span class="keyword">let</span> a =[]</span><br><span class="line">a[<span class="number">1000</span>] = <span class="number">1</span> <span class="comment">// 数组长度为1001,但是实际元素只有1个</span></span><br></pre></td></tr></table></figure>
<p><strong>关于JavaScript权威指南p145的错误</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [,,,];<span class="comment">//数组是[undefined,undefined,undefined]  == &gt; 这里是 错误的，应该是都是empty</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a1  <span class="comment">//true:a1在索引0处有一个元素。  ==&gt; 这里应该是false</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a2  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="密集数组-1"><a href="#密集数组-1" class="headerlink" title="密集数组"></a>密集数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Array</span>.apply(<span class="literal">null</span>,<span class="built_in">Array</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a =[]</span><br><span class="line">a[<span class="string">&quot;aa&quot;</span>] = <span class="string">&quot;aaa&quot;</span></span><br><span class="line">a[<span class="string">&quot;bb&quot;</span>] = <span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="comment">// a =&gt; [aa:&quot;aaa&quot;,bb:&quot;bbb&quot;]</span></span><br><span class="line"><span class="comment">// a.length = 0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>引用类型和基本类型</title>
    <url>/posts/d3b053f/</url>
    <content><![CDATA[<h1 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h1><p>基本类型: Number Booleam String undefined null<br>引用类型: Object Function<br>基本类型的数据是放在栈内存中，而引用类型的数据是放在堆内存中</p>
<span id="more"></span>

<h1 id="JS传参差别-按值还是按址"><a href="#JS传参差别-按值还是按址" class="headerlink" title="JS传参差别 按值还是按址?"></a>JS传参差别 按值还是按址?</h1><h2 id="复制变量"><a href="#复制变量" class="headerlink" title="复制变量"></a>复制变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span> | <span class="subst">$&#123;b&#125;</span>`</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj1.num = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> obj2 = obj1</span><br><span class="line">obj2.mum =<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj1.mun&#125;</span> | <span class="subst">$&#123;obj2.mum&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p>基础类型由于是放在栈内存中，每个变量都有自己的值，所以其中一个值改变了，不影响另外一个。<br>引用类型其实就是在栈内存中存储了一个指针，这个指针指向的是存储地址，变量复制其实就是把这个地址复制给了另外一个变量，如果其中一个将这个对象修改了，那么另外一个也会改变。</p>
<h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><blockquote>
<p>到底是按值传参还是按址传参<br>示例1:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  num += <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> result = add(count)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;count&#125;</span> | <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// 20 | 30</span></span><br></pre></td></tr></table></figure>
<p>按值传递,秒懂！</p>
<p>示例2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">let</span> newPerson = setName(person)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> | <span class="subst">$&#123;newPerson.name&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// aaa | aaa</span></span><br></pre></td></tr></table></figure>
<p>示例3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()  <span class="comment">// 如果是按引用传递的,此处传参进来obj应该被重新引用新的内存单元</span></span><br><span class="line">  obj.name = <span class="string">&#x27;ccc&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">let</span> newPerson = setName(person)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> | <span class="subst">$&#123;newPerson.name&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// aaa | ccc</span></span><br></pre></td></tr></table></figure>
<p>// TODO  还是有点懵逼<br>// 还有new出来的实例</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>CEPH客户端版本升级</title>
    <url>/posts/bab85c8a/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -q -O- &#x27;https://download.ceph.com/keys/release.asc&#x27; | sudo apt-key add -</span><br><span class="line">echo deb https://download.ceph.com/debian-nautilus/ $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/ceph.list</span><br><span class="line">apt update</span><br><span class="line">apt install ceph-common</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CEPH</category>
      </categories>
  </entry>
  <entry>
    <title>s3-exporter实现</title>
    <url>/posts/f7f721f2/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	rootDir <span class="keyword">string</span></span><br><span class="line">	depth   <span class="keyword">int</span></span><br><span class="line">	port    <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BucketUsage <span class="keyword">struct</span> &#123;</span><br><span class="line">	Bucket <span class="keyword">string</span> <span class="string">`json:&quot;bucket&quot;`</span></span><br><span class="line">	Owner  <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">	Usage  <span class="keyword">struct</span> &#123;</span><br><span class="line">		RGWMain <span class="keyword">struct</span> &#123;</span><br><span class="line">			Size         <span class="keyword">float64</span> <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">			SizeActual   <span class="keyword">float64</span> <span class="string">`json:&quot;size_actual&quot;`</span></span><br><span class="line">			SizeUtilized <span class="keyword">float64</span> <span class="string">`json:&quot;size_utilized&quot;`</span></span><br><span class="line">			NumObjects   <span class="keyword">float64</span> <span class="string">`json:&quot;num_objects&quot;`</span></span><br><span class="line">		&#125; <span class="string">`json:&quot;rgw.main&quot;`</span></span><br><span class="line">	&#125; <span class="string">`json:&quot;usage&quot;`</span></span><br><span class="line">	BucketQuota <span class="keyword">struct</span> &#123;</span><br><span class="line">		Enable     <span class="keyword">bool</span>    <span class="string">`json:&quot;enabled&quot;`</span></span><br><span class="line">		MaxSize    <span class="keyword">float64</span> <span class="string">`json:&quot;max_size&quot;`</span></span><br><span class="line">		MaxSizeKB  <span class="keyword">float64</span> <span class="string">`json:&quot;max_size_kb&quot;`</span></span><br><span class="line">		MaxObjects <span class="keyword">float64</span> <span class="string">`json:&quot;max_objects&quot;`</span></span><br><span class="line">	&#125; <span class="string">`json:&quot;bucket_quota&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> namespace <span class="keyword">string</span> = <span class="string">&quot;unionstor_radosgw_usage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Collector <span class="keyword">struct</span> &#123;</span><br><span class="line">	mu                      sync.Mutex</span><br><span class="line">	BucketSizeBytes         *prometheus.GaugeVec</span><br><span class="line">	BucketSizeUtilizedBytes *prometheus.GaugeVec</span><br><span class="line">	BucketNumsObjects       *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaEnable       *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxSize      *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxSizeBytes *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxObjects   *prometheus.GaugeVec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exec_cmd</span><span class="params">(command <span class="keyword">string</span>, timeout <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Second*time.Duration(timeout))</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">	cmd := exec.CommandContext(ctx, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, command)</span><br><span class="line">	out, err := cmd.CombinedOutput()</span><br><span class="line">	<span class="keyword">return</span> out, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCollector</span><span class="params">()</span> *<span class="title">Collector</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Collector&#123;</span><br><span class="line">		BucketSizeBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_size_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_size_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketSizeUtilizedBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_size_utilized_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_size_utilized_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketNumsObjects: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_num_objects&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_num_objects&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaEnable: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_enable&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_enable&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxSize: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_size&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_size&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxSizeBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_size_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_size_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxObjects: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_objects&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_objects&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">collectorList</span><span class="params">()</span> []<span class="title">prometheus</span>.<span class="title">Collector</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> []prometheus.Collector&#123;</span><br><span class="line">		c.BucketSizeBytes,</span><br><span class="line">		c.BucketSizeUtilizedBytes,</span><br><span class="line">		c.BucketNumsObjects,</span><br><span class="line">		c.BucketQuotaEnable,</span><br><span class="line">		c.BucketQuotaMaxSize,</span><br><span class="line">		c.BucketQuotaMaxSizeBytes,</span><br><span class="line">		c.BucketQuotaMaxObjects,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">Describe</span><span class="params">(ch <span class="keyword">chan</span>&lt;- *prometheus.Desc)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, metric := <span class="keyword">range</span> c.collectorList() &#123;</span><br><span class="line">		metric.Describe(ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">Collect</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span></span> &#123;</span><br><span class="line">	c.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">	<span class="keyword">if</span> err := c.collect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, metric := <span class="keyword">range</span> c.collectorList() &#123;</span><br><span class="line">		metric.Collect(ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">collect</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	cmd := <span class="string">&quot;radosgw-admin bucket stats&quot;</span></span><br><span class="line">	cmdRet, err := exec_cmd(cmd, <span class="number">30</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;exec bucket stats error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	bucketsUsage := []BucketUsage&#123;&#125;</span><br><span class="line">	err = json.Unmarshal(cmdRet, &amp;bucketsUsage)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;parse cmd returen error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	c.BucketSizeBytes.Reset()</span><br><span class="line">	c.BucketSizeUtilizedBytes.Reset()</span><br><span class="line">	c.BucketNumsObjects.Reset()</span><br><span class="line">	c.BucketQuotaEnable.Reset()</span><br><span class="line">	c.BucketQuotaMaxSize.Reset()</span><br><span class="line">	c.BucketQuotaMaxSizeBytes.Reset()</span><br><span class="line">	c.BucketQuotaMaxObjects.Reset()</span><br><span class="line">	<span class="keyword">for</span> _, bucketUsage := <span class="keyword">range</span> bucketsUsage &#123;</span><br><span class="line">		bucketName := bucketUsage.Bucket</span><br><span class="line">		bucketOwner := bucketUsage.Owner</span><br><span class="line">		bucketSizeBytes := bucketUsage.Usage.RGWMain.SizeActual</span><br><span class="line">		bucketSizeUtilizedBytes := bucketUsage.Usage.RGWMain.SizeUtilized</span><br><span class="line">		bucketObjects := bucketUsage.Usage.RGWMain.NumObjects</span><br><span class="line">		<span class="keyword">var</span> bucketQuotaEnable <span class="keyword">float64</span> = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> bucketUsage.BucketQuota.Enable &#123;</span><br><span class="line">			bucketQuotaEnable = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		bucketQuotaMaxSize := bucketUsage.BucketQuota.MaxSize</span><br><span class="line">		bucketQuotaMaxSizeBytes := bucketUsage.BucketQuota.MaxSizeKB</span><br><span class="line">		bucketQuotaMaxObjects := bucketUsage.BucketQuota.MaxObjects</span><br><span class="line">		c.BucketSizeBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketSizeBytes)</span><br><span class="line">		c.BucketSizeUtilizedBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketSizeUtilizedBytes)</span><br><span class="line">		c.BucketNumsObjects.WithLabelValues(bucketName, bucketOwner).Set(bucketObjects)</span><br><span class="line">		c.BucketQuotaEnable.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaEnable)</span><br><span class="line">		c.BucketQuotaMaxSize.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxSize)</span><br><span class="line">		c.BucketQuotaMaxSizeBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxSizeBytes)</span><br><span class="line">		c.BucketQuotaMaxObjects.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxObjects)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.StringVar(&amp;rootDir, <span class="string">&quot;path&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;A cephfs path&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;depth, <span class="string">&quot;depth&quot;</span>, <span class="number">2</span>, <span class="string">&quot;default depth&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;port, <span class="string">&quot;port&quot;</span>, <span class="number">8080</span>, <span class="string">&quot;default exporter port&quot;</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line">	prometheus.MustRegister(NewCollector())</span><br><span class="line">	http.Handle(<span class="string">&quot;/metrics&quot;</span>, promhttp.Handler())</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:&quot;</span>+strconv.Itoa(port), <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CEPH</category>
        <category>S3</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令|cut</title>
    <url>/posts/5b806bba/</url>
    <content><![CDATA[<h1 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h1><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</span><br><span class="line">-c ：以字符为单位进行分割。</span><br><span class="line">-d ：自定义分隔符，默认为制表符。</span><br><span class="line">-f ：与-d一起使用，指定显示哪个区域。</span><br><span class="line">-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</span><br></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com  -c1 | grep PING | cut -d &#x27;(&#x27; -f2| cut -d &#x27;)&#x27; -f1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
  </entry>
  <entry>
    <title>SHELL参数的含义</title>
    <url>/posts/1b4c4aa3/</url>
    <content><![CDATA[<ul>
<li>$0<br>当前脚本的文件名</li>
<li>$n<br>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</li>
<li>$#<br>传递给脚本或函数的参数个数。</li>
<li>$*<br>传递给脚本或函数的所有参数。</li>
<li>$@<br>传递给脚本或函数的所有参数。</li>
<li>$* 和 $@ 的区别<ul>
<li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “2” “n” 的形式输出所有参数</li>
<li>当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … n”的形式输出所有参数；”n”的形式输出所有参数；”n”的形式输出所有参数；”@” 会将各个参数分开，以”$1” “2”…”n” 的形式输出所有参数。</li>
</ul>
</li>
<li>$?<br>上个命令的退出状态，或函数的返回值。</li>
<li>$$<br>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID</li>
</ul>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
  </entry>
  <entry>
    <title>Docker部署gitlab</title>
    <url>/posts/e32bdacf/</url>
    <content><![CDATA[<ul>
<li><a href="#1%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">1.环境准备</a><ul>
<li><a href="#11-%E6%8B%89%E5%8F%96%E6%9C%80%E6%96%B0%E5%AE%B9%E5%99%A8">1.1 拉取最新容器</a></li>
<li><a href="#12-%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8">1.2 构建容器</a><ul>
<li><a href="#121-%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95%E7%94%A8%E4%BA%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">1.2.1 创建目录，用于数据持久化</a></li>
<li><a href="#122-%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8">1.2.2 构建容器</a></li>
<li><a href="#123-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8">1.2.3 查看容器</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2-%E9%85%8D%E7%BD%AEgitlab%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80">2. 配置Gitlab访问地址</a></li>
<li><a href="#3-%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1">3. 访问服务</a></li>
<li><a href="#4-mac%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C">4. mac访问宿主机网络</a></li>
</ul>
<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><h3 id="1-1-拉取最新容器"><a href="#1-1-拉取最新容器" class="headerlink" title="1.1 拉取最新容器"></a>1.1 拉取最新容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<h3 id="1-2-构建容器"><a href="#1-2-构建容器" class="headerlink" title="1.2 构建容器"></a>1.2 构建容器</h3><h4 id="1-2-1-创建目录，用于数据持久化"><a href="#1-2-1-创建目录，用于数据持久化" class="headerlink" title="1.2.1 创建目录，用于数据持久化"></a>1.2.1 创建目录，用于数据持久化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $&#123;gitlab-home&#125;/&#123;data,config,logs&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-2-构建容器"><a href="#1-2-2-构建容器" class="headerlink" title="1.2.2 构建容器"></a>1.2.2 构建容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">-p 443:443 -p 80:80 -p 222:22 \</span><br><span class="line">--name gitlab --restart always \</span><br><span class="line">-v $&#123;gitlab-home&#125;/config:/etc/gitlab \</span><br><span class="line">-v $&#123;gitlab-home&#125;/logs:/var/log/gitlab \</span><br><span class="line">-v $&#123;gitlab-home&#125;/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-查看容器"><a href="#1-2-3-查看容器" class="headerlink" title="1.2.3 查看容器"></a>1.2.3 查看容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a | grep gitlab</span><br></pre></td></tr></table></figure>
<h2 id="2-配置Gitlab访问地址"><a href="#2-配置Gitlab访问地址" class="headerlink" title="2. 配置Gitlab访问地址"></a>2. 配置Gitlab访问地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1: 进入容器</span><br><span class="line"># step2: vim /etc/gitlab/gitlab.rb 修改 external_url</span><br><span class="line"># step3: 重启容器</span><br></pre></td></tr></table></figure>
<h2 id="3-访问服务"><a href="#3-访问服务" class="headerlink" title="3. 访问服务"></a>3. 访问服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 管理员默认用户 root</span><br><span class="line">## 管理员默认密码 /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure>
<h2 id="4-mac访问宿主机网络"><a href="#4-mac访问宿主机网络" class="headerlink" title="4. mac访问宿主机网络"></a>4. mac访问宿主机网络</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1: 使用Gitlab管理员账号修改如下配置</span><br><span class="line">Menu =&gt; Admin =&gt; Settings =&gt; Network =&gt; Outbound requests</span><br><span class="line">勾选Allow requests to the local network from web hooks and services</span><br><span class="line"># step2: container中使用docker.for.mac.localhost访问宿主机</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>Work Environment setup</title>
    <url>/posts/27b637df/</url>
    <content><![CDATA[<h3 id="Mac-App"><a href="#Mac-App" class="headerlink" title="Mac App"></a>Mac App</h3><ul>
<li>InsomniaX for Mac (Disable the sleep mode on your Mac)</li>
<li>Karabiner-Elements (改建利器)</li>
<li>Alfred</li>
<li>Spectacle (分屏软件)</li>
<li>dozer (系统栏图标隐藏工具)</li>
<li>Itsycal (日历)</li>
<li>Hammerspoon</li>
<li>PicGo</li>
<li>kubectx</li>
</ul>
<h3 id="vim-conf"><a href="#vim-conf" class="headerlink" title="vim.conf"></a>vim.conf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; 语法高亮</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">&quot; 编码设置</span><br><span class="line">set encoding=utf-8</span><br><span class="line">&quot; 显示匹配</span><br><span class="line">set showmatch</span><br><span class="line">&quot; 显示标尺</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">Plug &#x27;Yggdroot/indentLine&#x27;</span><br><span class="line">Plug &#x27;ayu-theme/ayu-vim&#x27;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; indentLine &#123;&#123;</span><br><span class="line">let g:indentLine_char = &#x27;┆&#x27;</span><br><span class="line">&quot; &#125;&#125;</span><br><span class="line">&quot; ayu-vim &#123;&#123;</span><br><span class="line">set termguicolors</span><br><span class="line">let ayucolor=&quot;dark&quot;</span><br><span class="line">colorscheme ayu</span><br><span class="line">&quot; &#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>版本号命名规则指南</title>
    <url>/posts/6ce3f532/</url>
    <content><![CDATA[<h1 id="版本号命名规则指南"><a href="#版本号命名规则指南" class="headerlink" title="版本号命名规则指南"></a>版本号命名规则指南</h1><h2 id="版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为："><a href="#版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为：" class="headerlink" title="版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为："></a>版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为：</h2><ul>
<li>X 表示主版本号，当 API 的兼容性变化时，X 需递增。</li>
<li>Y 表示次版本号，当增加功能时(不影响 API 的兼容性)，Y 需递增。</li>
<li>Z 表示修订号，当做 Bug 修复时(不影响 API 的兼容性)，Z 需递增。</li>
</ul>
<h2 id="详细的规则如下："><a href="#详细的规则如下：" class="headerlink" title="详细的规则如下："></a>详细的规则如下：</h2><ol>
<li>X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</li>
<li>0.Y.Z 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；1.0.0 表明版本已有稳定的 API。</li>
<li>当 API 的兼容性变化时，X 必须递增，Y 和 Z 同时设置为 0；当新增功能(不影响 API 的兼容性)或者 API 被标记为 Deprecated 时，Y 必须递增，同时 Z 设置为 0；当进行 bug fix 时，Z 必须递增。</li>
<li>先行版本号(Pre-release)意味该版本不稳定，可能存在兼容性问题，其格式为：X.Y.Z.[a-c][正整数]，如 1.0.0.a1，1.0.0.b99，1.0.0.c1000。</li>
<li>开发版本号常用于 CI-CD，格式为 X.Y.Z.dev[正整数]，如 1.0.1.dev4。</li>
<li>版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 1.0.0 &lt; 1.0.1 &lt; 1.1.1 &lt; 2.0.0；对于先行版本号和开发版本号，有：1.0.0.a100 &lt; 1.0.0，2.1.0.dev3 &lt; 2.1.0；当存在字母时，以 ASCII 的排序来比较，如 1.0.0.a1 &lt; 1.0.0.b1。</li>
<li>注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！</li>
</ol>
<h2 id="一些修饰的词"><a href="#一些修饰的词" class="headerlink" title="一些修饰的词"></a>一些修饰的词</h2><ul>
<li>alpha：内部版本</li>
<li>beta：测试版</li>
<li>demo：演示版</li>
<li>enhance：增强版</li>
<li>free：自由版</li>
<li>full version：完整版，即正式版</li>
<li>lts：长期维护版本</li>
<li>release：发行版</li>
<li>rc：即将作为正式版发布</li>
<li>standard：标准版</li>
<li>ultimate：旗舰版</li>
<li>upgrade：升级版</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
</search>
