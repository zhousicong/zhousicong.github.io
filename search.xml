<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Argo CD实战|安装部署</title>
    <url>/posts/a25ee031/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>　　Argo CD 是一个为 Kubernetes 而生的，遵循声明式 GitOps 理念的持续部署工具。Argo CD 可在 Git 存储库更改时自动同步和部署应用程序。</p>
<span id="more"></span>

<p>　　Argo CD 遵循 GitOps 模式，使用 Git 仓库作为定义所需应用程序状态的真实来源，Argo CD 支持多种 Kubernetes 清单：</p>
<ul>
<li>kustomize</li>
<li>helm charts</li>
<li>ksonnet applications</li>
<li>jsonnet files</li>
<li>Plain directory of YAML/json manifests</li>
<li>Any custom config management tool configured as a config management plugin　　Argo CD 可在指定的目标环境中自动部署所需的应用程序状态，应用程序部署可以在 Git 提交时跟踪对分支、标签的更新，或固定到清单的指定版本。</li>
</ul>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li>Application：应用，一组由资源清单定义的 Kubernetes 资源，这是一个 CRD 资源对象</li>
<li>Application source type：用来构建应用的工具</li>
<li>Target state：目标状态，指应用程序所需的期望状态，由 Git 存储库中的文件表示</li>
<li>Live state：实时状态，指应用程序实时的状态，比如部署了哪些 Pods 等真实状态</li>
<li>Sync status：同步状态表示实时状态是否与目标状态一致，部署的应用是否与 Git 所描述的一样？</li>
<li>Sync：同步指将应用程序迁移到其目标状态的过程，比如通过对 Kubernetes 集群应用变更</li>
<li>Sync operation status：同步操作状态指的是同步是否成功</li>
<li>Refresh：刷新是指将 Git 中的最新代码与实时状态进行比较，弄清楚有什么不同</li>
<li>Health：应用程序的健康状况，它是否正常运行？能否为请求提供服务？</li>
<li>Tool：工具指从文件目录创建清单的工具，例如 Kustomize 或 Ksonnet 等</li>
<li>Configuration management tool：配置管理工具</li>
<li>Configuration management plugin：配置管理插件</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create namespace argocd</span><br></pre></td></tr></table></figure>
<h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</span><br><span class="line"></span><br><span class="line">kubectl get po -n argocd</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">argocd-application-controller-0       1/1     Running   0          3d19h</span><br><span class="line">argocd-dex-server-68c7bf5fdd-n4wnw    1/1     Running   0          3d19h</span><br><span class="line">argocd-redis-7547547c4f-2297t         1/1     Running   0          3d19h</span><br><span class="line">argocd-repo-server-58f87478b8-zrc7f   1/1     Running   0          3d19h</span><br><span class="line">argocd-server-6f4fcdc5dc-c8z54        1/1     Running   0          3d19h</span><br></pre></td></tr></table></figure>
<h3 id="暴露Argocd-API-Server"><a href="#暴露Argocd-API-Server" class="headerlink" title="暴露Argocd API Server"></a>暴露Argocd API Server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可以修改type为LoadBalancer</span><br><span class="line">kubectl patch svc argocd-server -n argocd -p &#x27;&#123;&quot;spec&quot;: &#123;&quot;type&quot;: &quot;LoadBalancer&quot;&#125;&#125;&#x27;</span><br><span class="line"># 亦可以直接编辑argocd-server service</span><br><span class="line">......</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.111.50.107</span><br><span class="line">  clusterIPs:</span><br><span class="line">  - 10.111.50.107</span><br><span class="line">  externalTrafficPolicy: Cluster</span><br><span class="line">  ipFamilies:</span><br><span class="line">  - IPv4</span><br><span class="line">  ipFamilyPolicy: SingleStack</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    nodePort: 32714</span><br><span class="line">    port: 8080</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  - name: https</span><br><span class="line">    nodePort: 31315</span><br><span class="line">    port: 8443</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: argocd-server</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: LoadBalancer</span><br></pre></td></tr></table></figure>
<h3 id="访问Argocd"><a href="#访问Argocd" class="headerlink" title="访问Argocd"></a>访问Argocd</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载argocd cli</span><br><span class="line">brew install argocd </span><br><span class="line"># 获取初始化密码</span><br><span class="line">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;&#123;.data.password&#125;&quot; | base64 -d</span><br><span class="line"># 通过命令行登录argocd</span><br><span class="line">argocd login localhost</span><br><span class="line"># 命令行修改密码</span><br><span class="line">argocd account update-password</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241039178.png" alt="argocd-ui-1"></p>
<h3 id="Argocd-UI创建APP"><a href="#Argocd-UI创建APP" class="headerlink" title="Argocd UI创建APP"></a>Argocd UI创建APP</h3><p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241650638.png" alt="argocd-ui-2"><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241652922.png" alt="argocd-ui-3"><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241653505.png" alt="argocd-ui-4"><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241655840.png" alt="argocd-ui-5"><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241656082.png" alt="argocd-ui-6"></p>
<h3 id="Argocd-cli创建APP"><a href="#Argocd-cli创建APP" class="headerlink" title="Argocd cli创建APP"></a>Argocd cli创建APP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">argocd app create my-app --repo http://172.16.20.150/devops/vue_todolist.git --path deploy --dest-namespace test --dest-server https://kubernetes.default.svc --directory-recurse</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108251023860.png" alt="argocd-ui-7"></p>
<h3 id="Argocd-cli同步APP"><a href="#Argocd-cli同步APP" class="headerlink" title="Argocd cli同步APP"></a>Argocd cli同步APP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ argocd app sync my-app</span><br><span class="line">TIMESTAMP                  GROUP        KIND   NAMESPACE                  NAME    STATUS    HEALTH        HOOK  MESSAGE</span><br><span class="line">2021-08-25T10:24:17+08:00            Service        test         nginx-service  OutOfSync  Missing</span><br><span class="line">2021-08-25T10:24:17+08:00   apps  Deployment        test          nginx-deploy  OutOfSync  Missing</span><br><span class="line">2021-08-25T10:24:18+08:00            Service        test         nginx-service    Synced  Healthy</span><br><span class="line">2021-08-25T10:24:19+08:00            Service        test         nginx-service    Synced   Healthy              service/nginx-service created</span><br><span class="line">2021-08-25T10:24:19+08:00   apps  Deployment        test          nginx-deploy  OutOfSync  Missing              deployment.apps/nginx-deploy created</span><br><span class="line">2021-08-25T10:24:19+08:00   apps  Deployment        test          nginx-deploy    Synced  Progressing              deployment.apps/nginx-deploy created</span><br><span class="line"></span><br><span class="line">Name:               my-app</span><br><span class="line">Project:            default</span><br><span class="line">Server:             https://kubernetes.default.svc</span><br><span class="line">Namespace:          test</span><br><span class="line">URL:                https://localhost:8080/applications/my-app</span><br><span class="line">Repo:               http://172.16.20.150/devops/vue_todolist.git</span><br><span class="line">Target:</span><br><span class="line">Path:               deploy</span><br><span class="line">SyncWindow:         Sync Allowed</span><br><span class="line">Sync Policy:        &lt;none&gt;</span><br><span class="line">Sync Status:        Synced to  (3ad8e19)</span><br><span class="line">Health Status:      Progressing</span><br><span class="line"></span><br><span class="line">Operation:          Sync</span><br><span class="line">Sync Revision:      3ad8e19051f9bbf003800790d50ef7fd26cda7c1</span><br><span class="line">Phase:              Succeeded</span><br><span class="line">Start:              2021-08-25 10:24:17 +0800 CST</span><br><span class="line">Finished:           2021-08-25 10:24:19 +0800 CST</span><br><span class="line">Duration:           2s</span><br><span class="line">Message:            successfully synced (all tasks run)</span><br><span class="line"></span><br><span class="line">GROUP  KIND        NAMESPACE  NAME           STATUS  HEALTH       HOOK  MESSAGE</span><br><span class="line">       Service     test       nginx-service  Synced  Healthy            service/nginx-service created</span><br><span class="line">apps   Deployment  test       nginx-deploy   Synced  Progressing        deployment.apps/nginx-deploy created</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108251025334.png" alt="argocd-ui-7"><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108251026671.png" alt="argocd-ui-8"></p>
]]></content>
      <categories>
        <category>Argo</category>
        <category>Argo CD</category>
      </categories>
      <tags>
        <tag>Argo</tag>
      </tags>
  </entry>
  <entry>
    <title>Argo Events实战|安装部署</title>
    <url>/posts/ae06cf7a/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Argo Events是Kubernetes的事件驱动的工作流自动化框架.</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>Event Source<blockquote>
<p>类似Gateway,把消息发送给eventbus</p>
</blockquote>
</li>
<li>Sensor<blockquote>
<p>时间参数化并对时间过滤</p>
</blockquote>
</li>
<li>EventBus<blockquote>
<p>时间消息队列</p>
</blockquote>
</li>
<li>Trigger<blockquote>
<p>k8S CRD</p>
</blockquote>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>确保已经安装Argo Workflow</p>
</blockquote>
<h3 id="1-创建命名空间"><a href="#1-创建命名空间" class="headerlink" title="1. 创建命名空间"></a>1. 创建命名空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create ns argo-events</span><br></pre></td></tr></table></figure>
<h3 id="2-部署argo-events相关组件"><a href="#2-部署argo-events相关组件" class="headerlink" title="2. 部署argo events相关组件"></a>2. 部署argo events相关组件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install with a validating admission controller</span></span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-events/stable/manifests/install-validating-webhook.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-部署eventbus"><a href="#3-部署eventbus" class="headerlink" title="3. 部署eventbus"></a>3. 部署eventbus</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/eventbus/native.yaml</span><br></pre></td></tr></table></figure>
<h3 id="4-创建能够触发Workflow的用户"><a href="#4-创建能够触发Workflow的用户" class="headerlink" title="4. 创建能够触发Workflow的用户"></a>4. 创建能够触发Workflow的用户</h3><details>
<summary>user.yaml</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Similarly you can use a ClusterRole and ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">argoproj.io</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">workflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">workflowtemplates</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cronworkflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">clusterworkflowtemplates</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">argo-events</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">operate-workflow-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">operate-workflow-sa</span></span><br></pre></td></tr></table></figure>
</details>

<h3 id="5-部署event-source"><a href="#5-部署event-source" class="headerlink" title="5. 部署event source"></a>5. 部署event source</h3><blockquote>
<p>用于接收请求</p>
</blockquote>
<details>
<summary>eventsource.yaml</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: argoproj.io/v1alpha1</span><br><span class="line">kind: EventSource</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-eventsource</span><br><span class="line">spec:</span><br><span class="line">  webhook:</span><br><span class="line">    gitlab-example:</span><br><span class="line">      port: &quot;13000&quot;</span><br><span class="line">      endpoint: /webhook</span><br><span class="line">      method: POST</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-webhook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    eventsource-name: gitlab-eventsource</span><br><span class="line">  ports:</span><br><span class="line">    - port: 13000</span><br><span class="line">      targetPort: 13000</span><br><span class="line">  type: LoadBalancer</span><br></pre></td></tr></table></figure>
</details>

<h3 id="6-部署Sensor服务"><a href="#6-部署Sensor服务" class="headerlink" title="6. 部署Sensor服务"></a>6. 部署Sensor服务</h3><blockquote>
<p>消费请求</p>
</blockquote>
<details>
<summary>sensor.yaml</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sensor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">serviceAccountName:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-dep</span></span><br><span class="line">      <span class="attr">eventSourceName:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">      <span class="attr">eventName:</span> <span class="string">gitlab-example</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitlab-workflow-trigger</span></span><br><span class="line">        <span class="attr">k8s:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">argoproj.io</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">workflows</span></span><br><span class="line">          <span class="attr">operation:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">source:</span></span><br><span class="line">            <span class="attr">git:</span></span><br><span class="line">              <span class="attr">filePath:</span> <span class="string">&quot;workflow/gitlab.yaml&quot;</span></span><br><span class="line">          <span class="attr">parameters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.0.value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.1.value</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.url</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.ref</span></span><br></pre></td></tr></table></figure>
</details>

<blockquote>
<p>senor可以定义一系列的triggers,例如k8s资源对象(eg:workflow对象本身) <a href="https://github.com/argoproj/argo-events/blob/master/api/sensor.md">sensor-api</a><br>示例2可以将资源文件与代码一起提交至代码库,方便进行回归测试,也可以查看不同时期workflow的差异</p>
</blockquote>
<details>
<summary>示例1: 完整的workflow对象</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sensor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">serviceAccountName:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-dep</span></span><br><span class="line">      <span class="attr">eventSourceName:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">      <span class="attr">eventName:</span> <span class="string">gitlab-example</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitlab-workflow-trigger</span></span><br><span class="line">        <span class="attr">k8s:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">argoproj.io</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">workflows</span></span><br><span class="line">          <span class="attr">operation:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">source:</span></span><br><span class="line">            <span class="attr">resource:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line">              <span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line">              <span class="attr">metadata:</span></span><br><span class="line">                <span class="attr">generateName:</span> <span class="string">gitlab-workflow-</span></span><br><span class="line">              <span class="attr">spec:</span></span><br><span class="line">                <span class="attr">entrypoint:</span> <span class="string">argo-ci</span></span><br><span class="line">                <span class="attr">arguments:</span></span><br><span class="line">                  <span class="attr">parameters:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                      <span class="attr">value:</span> <span class="string">http://172.16.20.150/root/vue_todolist.git</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                      <span class="attr">value:</span> <span class="string">main</span></span><br><span class="line">                <span class="attr">templates:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">argo-ci</span></span><br><span class="line">                    <span class="attr">steps:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">                          <span class="attr">template:</span> <span class="string">checkout</span></span><br><span class="line">                          <span class="attr">arguments:</span></span><br><span class="line">                            <span class="attr">parameters:</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                                <span class="attr">value:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;workflow.parameters.repo&#125;&#125;</span>&quot;</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                                <span class="attr">value:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;workflow.parameters.revision&#125;&#125;</span>&quot;</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">                          <span class="attr">template:</span> <span class="string">build</span></span><br><span class="line">                          <span class="attr">arguments:</span></span><br><span class="line">                            <span class="attr">artifacts:</span></span><br><span class="line">                              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                                <span class="attr">from:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;steps.checkout.outputs.artifacts.source&#125;&#125;</span>&quot;</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">                    <span class="attr">inputs:</span></span><br><span class="line">                      <span class="attr">parameters:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">revision</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                          <span class="attr">git:</span></span><br><span class="line">                            <span class="attr">repo:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;inputs.parameters.repo&#125;&#125;</span>&quot;</span></span><br><span class="line">                            <span class="attr">revision:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;inputs.parameters.revision&#125;&#125;</span>&quot;</span></span><br><span class="line">                    <span class="attr">outputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">container:</span></span><br><span class="line">                      <span class="attr">image:</span> <span class="string">my-ubuntu:v0.1</span></span><br><span class="line">                      <span class="attr">command:</span> [<span class="string">sh</span>, <span class="string">-c</span>]</span><br><span class="line">                      <span class="attr">args:</span> [<span class="string">&quot;cd /src &amp;&amp; git status &amp;&amp; ls -l&quot;</span>]</span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">                    <span class="attr">inputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">outputs:</span></span><br><span class="line">                      <span class="attr">artifacts:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source</span></span><br><span class="line">                          <span class="attr">path:</span> <span class="string">/src</span></span><br><span class="line">                    <span class="attr">container:</span></span><br><span class="line">                      <span class="attr">image:</span> <span class="string">my-ubuntu:v0.1</span></span><br><span class="line">                      <span class="attr">command:</span> [<span class="string">sh</span>, <span class="string">-c</span>]</span><br><span class="line">                      <span class="attr">args:</span> [</span><br><span class="line">                          <span class="string">&quot;</span></span><br><span class="line"><span class="string">                          cd /src &amp;&amp;</span></span><br><span class="line"><span class="string">                          npm install --registry https://registry.npm.taobao.org &amp;&amp;</span></span><br><span class="line"><span class="string">                          npm run build</span></span><br><span class="line"><span class="string">                          &quot;</span>,</span><br><span class="line">                        ]</span><br><span class="line">          <span class="attr">parameters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.0.value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.1.value</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>示例2: 访问git仓库中的资源文件</summary>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sensor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">serviceAccountName:</span> <span class="string">operate-workflow-sa</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-dep</span></span><br><span class="line">      <span class="attr">eventSourceName:</span> <span class="string">gitlab-eventsource</span></span><br><span class="line">      <span class="attr">eventName:</span> <span class="string">gitlab-example</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gitlab-workflow-trigger</span></span><br><span class="line">        <span class="attr">k8s:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">argoproj.io</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">workflows</span></span><br><span class="line">          <span class="attr">operation:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">source:</span></span><br><span class="line">            <span class="attr">git:</span></span><br><span class="line">              <span class="attr">filePath:</span> <span class="string">&quot;workflow/gitlab.yaml&quot;</span></span><br><span class="line">          <span class="attr">parameters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.0.value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">                <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">                <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">              <span class="attr">dest:</span> <span class="string">spec.arguments.parameters.1.value</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.project.git_http_url</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.url</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span></span><br><span class="line">            <span class="attr">dependencyName:</span> <span class="string">test-dep</span></span><br><span class="line">            <span class="attr">dataKey:</span> <span class="string">body.ref</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">k8s.source.git.ref</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<h3 id="7-验证"><a href="#7-验证" class="headerlink" title="7. 验证"></a>7. 验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ curl -d &#x27;&#123;&quot;message&quot;:&quot;this is my first webhook&quot;&#125;&#x27; -H &quot;Content-Type: application/json&quot; -X POST http://localhost:13000/webhook</span><br><span class="line">success</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Argo</category>
        <category>Argo Events</category>
      </categories>
      <tags>
        <tag>Argo</tag>
      </tags>
  </entry>
  <entry>
    <title>Argo Workflow实践|安装部署</title>
    <url>/posts/1e633edc/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>　　Argo Workflow是一个云原生的工作流引擎，专注于编排并行任务。特点如下:</p>
<ul>
<li>使用K8S的CRD来定义工作流，本身也是CRD，可以使用yml直接定义</li>
<li>工作流的每一步都是一个容器</li>
<li>可以将多步骤工作流建模为一些列的任务，或者使用DAG(有向无环图)描述任务之间的关系</li>
<li>可以短时间内轻松运行用于机器学习或数据处理的计算密集型作业</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>请先安装K8S,本例采用快捷方式安装<br>本文安装时间为202108018,如果采用官网文档推荐<a href="https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml">资源文件</a>会出现浏览器访问报错但是命令行访问argo server正常的情况,<a href="https://github.com/argoproj/argo-workflows/issues/5573">相关issue</a><br>本例直接使用3.1.6版本资源文件，此版本已fix上述issue</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create ns argo</span><br><span class="line">kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.1.6/quick-start-postgres.yaml</span><br></pre></td></tr></table></figure>
<p>安装完成后，会有如下4个pod:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">argo-server-7949b545cc-szs9h          1/1     Running   0          3m49s</span><br><span class="line">minio-77d6796f8d-g6rsv                1/1     Running   0          3m49s</span><br><span class="line">postgres-546d9d68b-4xtrq              1/1     Running   0          3m49s</span><br><span class="line">workflow-controller-bd8bc5f86-kxsfv   1/1     Running   0          3m49s</span><br></pre></td></tr></table></figure>
<p>其中:</p>
<ul>
<li>argo-server为argo服务端</li>
<li>minio为制品仓库</li>
<li>postgres为数据库</li>
<li>workflow-controller为流程控制器</li>
</ul>
<h2 id="访问Argo-Workflows-UI"><a href="#访问Argo-Workflows-UI" class="headerlink" title="访问Argo Workflows UI"></a>访问Argo Workflows UI</h2><ol>
<li>kubectl port-forward<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n argo port-forward svc/argo-server 2746:2746</span><br></pre></td></tr></table></figure></li>
<li>Expose a loadBalancer<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl patch svc argo-server -n argo -p &#x27;&#123;&quot;spec&quot;: &#123;&quot;type&quot;: &quot;LoadBalancer&quot;&#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">NAME                          TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">argo-server                   LoadBalancer   10.110.3.94     &lt;pending&gt;     2746:31603/TCP   12m</span><br><span class="line">minio                         ClusterIP      10.111.108.35   &lt;none&gt;        9000/TCP         12m</span><br><span class="line">postgres                      ClusterIP      10.97.250.221   &lt;none&gt;        5432/TCP         12m</span><br><span class="line">workflow-controller-metrics   ClusterIP      10.107.148.72   &lt;none&gt;        9090/TCP         12m</span><br></pre></td></tr></table></figure></li>
<li>Ingress<br><code>示例略</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108191531513.png" alt="Argo Workflow UI"></p>
<h2 id="示例验证"><a href="#示例验证" class="headerlink" title="示例验证"></a>示例验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; argo submit -n argo --watch https://raw.githubusercontent.com/argoproj/argo-workflows/master/examples/hello-world.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: argoproj.io/v1alpha1</span><br><span class="line">kind: Workflow</span><br><span class="line">metadata:</span><br><span class="line">  generateName: hello-world-</span><br><span class="line">  labels:</span><br><span class="line">    workflows.argoproj.io/archive-strategy: &quot;false&quot;</span><br><span class="line">  annotations:</span><br><span class="line">    workflows.argoproj.io/description: |</span><br><span class="line">      This is a simple hello world example.</span><br><span class="line">      You can also run it in Python: https://couler-proj.github.io/couler/examples/#hello-world</span><br><span class="line">spec:</span><br><span class="line">  entrypoint: whalesay</span><br><span class="line">  templates:</span><br><span class="line">  - name: whalesay</span><br><span class="line">    container:</span><br><span class="line">      image: docker/whalesay:latest</span><br><span class="line">      command: [cowsay]</span><br><span class="line">      args: [&quot;hello world&quot;]</span><br><span class="line"></span><br><span class="line">&gt; argo list -n argo</span><br><span class="line">NAME                STATUS      AGE   DURATION   PRIORITY</span><br><span class="line">hello-world-hphdr   Succeeded   43s   10s        0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; argo get -n argo @latest</span><br><span class="line">Name:                hello-world-hphdr</span><br><span class="line">Namespace:           argo-events</span><br><span class="line">ServiceAccount:      default</span><br><span class="line">Status:              Succeeded</span><br><span class="line">Conditions:</span><br><span class="line"> PodRunning          False</span><br><span class="line"> Completed           True</span><br><span class="line">Created:             Thu Aug 19 15:34:37 +0800 (1 minute ago)</span><br><span class="line">Started:             Thu Aug 19 15:34:37 +0800 (1 minute ago)</span><br><span class="line">Finished:            Thu Aug 19 15:34:47 +0800 (1 minute ago)</span><br><span class="line">Duration:            10 seconds</span><br><span class="line">Progress:            1/1</span><br><span class="line">ResourcesDuration:   7s*(1 cpu),7s*(100Mi memory)</span><br><span class="line"></span><br><span class="line">STEP                  TEMPLATE  PODNAME            DURATION  MESSAGE</span><br><span class="line"> ✔ hello-world-hphdr  whalesay  hello-world-hphdr  7s</span><br><span class="line"></span><br><span class="line">This workflow does not have security context set. You can run your workflow pods more securely by setting it.</span><br><span class="line">Learn more at https://argoproj.github.io/argo-workflows/workflow-pod-security-context/</span><br><span class="line"></span><br><span class="line">&gt; argo logs -n argo @latest</span><br><span class="line">hello-world-hphdr:  _____________</span><br><span class="line">hello-world-hphdr: &lt; hello world &gt;</span><br><span class="line">hello-world-hphdr:  -------------</span><br><span class="line">hello-world-hphdr:     \</span><br><span class="line">hello-world-hphdr:      \</span><br><span class="line">hello-world-hphdr:       \</span><br><span class="line">hello-world-hphdr:                     ##        .</span><br><span class="line">hello-world-hphdr:               ## ## ##       ==</span><br><span class="line">hello-world-hphdr:            ## ## ## ##      ===</span><br><span class="line">hello-world-hphdr:        /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===</span><br><span class="line">hello-world-hphdr:   ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~</span><br><span class="line">hello-world-hphdr:        \______ o          __/</span><br><span class="line">hello-world-hphdr:         \    \        __/</span><br><span class="line">hello-world-hphdr:           \____\______/</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108191537622.png" alt="hello-workd-wf"></p>
]]></content>
      <categories>
        <category>Argo</category>
        <category>Argo Workflow</category>
      </categories>
      <tags>
        <tag>Argo</tag>
      </tags>
  </entry>
  <entry>
    <title>argo-combined-demo</title>
    <url>/posts/612a1ead/</url>
    <content><![CDATA[<blockquote>
<p>Automation of Every - How To combine Argo Events, Workflow &amp; CD</p>
</blockquote>
<span id="more"></span>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108251511952.png" alt="process"></p>
]]></content>
      <categories>
        <category>Argo</category>
      </categories>
      <tags>
        <tag>Argo</tag>
      </tags>
  </entry>
  <entry>
    <title>Go|fmt使用</title>
    <url>/posts/2dd94f98/</url>
    <content><![CDATA[<p>fmt是Go中最常用的包之一，主要实现了格式化I/O(输入/输出)。</p>
<span id="more"></span>
<p>fmt包大致分为输出和输入的两大部分。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><p>输出部分包括三个系列和一个独立的函数：Print系列，Fprint系列，Sprint系列，以及Errorf()。这些函数的使用场景如下：</p>
<ul>
<li>向终端输出一些信息的时候，使用Print系列。（使用程度：频繁）</li>
<li>将信息写入文件中时，使用Fprint系列。（使用程度：一般）</li>
<li>在程序中获取格式化字符串中时，使用Sprint系列。（使用程度：一般）</li>
<li>在程序中获取包含格式化字符串的错误时，使用Errorf()。（使用程度：几乎不）</li>
</ul>
<h3 id="Print系列"><a href="#Print系列" class="headerlink" title="Print系列"></a>Print系列</h3><p>Print系列中包含三个重要的函数：Print()，Printf()，Println()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>Print()将参数的内容进行标准输出，而Println()则是在标准输出后进行换行。（Println()中的ln意思为line）<br>让我们来测试一下这两个函数。第一次展示程序的所有内容，后面则会省略。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;test Println&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">string</span> = <span class="string">&quot;test Print&quot;</span></span><br><span class="line">    fmt.Print(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终端输出的结果为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">test Println   <span class="comment">//换行</span></span><br><span class="line">test Print</span><br><span class="line"><span class="string">``</span><span class="string">`     </span></span><br><span class="line"><span class="string">再来看一下Printf()。Printf()用于格式化字符串的输出。举个例子：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">var</span> date <span class="keyword">string</span> = <span class="string">&quot;20200408&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;今天的日期是：%s&quot;</span>, date)</span><br></pre></td></tr></table></figure>
<p>注意，这里的%s代表字符串的占位符，目的是为了告诉程序将date变量的代入位置。计算结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">今天的日期是：20200408</span><br></pre></td></tr></table></figure>

<h3 id="Fprint系列"><a href="#Fprint系列" class="headerlink" title="Fprint系列"></a>Fprint系列</h3><p>Fprint系列包含三个函数：Fprint(),Fprintf(),Fprintln()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>Fprint系列与Print系列相比多了一个io.Writer接口类型的参数w。Fprint系列函数会将内容输出到参数w中。只要参数类型实现了io.Writer接口，则都可以实现写入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开xx.txt文件</span></span><br><span class="line">fileObj, err := os.OpenFile(<span class="string">&quot;./xx.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;打开文件错误：err:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s := <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">// 向打开的文件中写入格式化字符串</span></span><br><span class="line">fmt.Fprintf(fileObj, <span class="string">&quot;往文件中写如信息：%s&quot;</span>, s)</span><br></pre></td></tr></table></figure>
<p>实际上，Print系列其实就是通过封装了Fprint系列来实现的。Print()的源代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Fprint(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用Print()后返回了一个Fprint()，而os.Stdout代表标准输出。因此我们可以用Fprint()来实现与Print()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;test Fprint&quot;</span></span><br><span class="line">fmt.Fprintln(os.Stdout, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//test Fprint</span></span><br></pre></td></tr></table></figure>

<h3 id="Sprint系列"><a href="#Sprint系列" class="headerlink" title="Sprint系列"></a>Sprint系列</h3><p>Sprint系列函数会把传入的参数生成并返回一个字符串。<br>Sprint系列包含三个函数：Sprint(),Sprintf(),Sprintln()。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprint</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure>
<p>Sprint系列与Print系列的区别在于输出的对象不同，Sprint系列的输出对象为字符串。利用time包，举一个输出日期和时间的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">year, month, day := time.Now().Date()</span><br><span class="line">hour, min, sec := time.Now().Clock()</span><br><span class="line"><span class="comment">//将格式化字符串写入变量s1中</span></span><br><span class="line">s1 := fmt.Sprintf(<span class="string">&quot;今天的日期的是：%d年%d月%d日，现在的时间是：%d:%d:%d\n&quot;</span>,year,month,day,hour,min,sec)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//今天的日期的是：2020年4月8日，现在的时间是：22:23:39</span></span><br></pre></td></tr></table></figure>

<h3 id="Errorf函数"><a href="#Errorf函数" class="headerlink" title="Errorf函数"></a>Errorf函数</h3><p>Errorf()根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">error := <span class="string">&quot;未知&quot;</span></span><br><span class="line">err := fmt.Errorf(<span class="string">&quot;这个错误类型为：%s&quot;</span>, error)</span><br><span class="line">fmt.Println(err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//这个错误类型为：未知</span></span><br></pre></td></tr></table></figure>
<p>它的底层是通过error包的new()中传入Sprintf()来实现的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(Sprintf(format, a...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这也就是为什么Errorf()没有它的兄弟Error()和Errorln()的原因了。因为我们可以直接通过errors.New()来生成一个非格式化字符串的错误。</p>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
  </entry>
  <entry>
    <title>Golang开发环境配置</title>
    <url>/posts/b66fdee6/</url>
    <content><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><hr>
<h3 id="安装Golang"><a href="#安装Golang" class="headerlink" title="安装Golang"></a>安装Golang</h3><ol>
<li>Golang<a href="https://golang.org/">官网</a>,进入下载页面，选择对应的版本进行下载安装</li>
<li>mac可以通过Homebrew <code>brew install go</code>进行安装</li>
</ol>
<blockquote>
<p>安装完成后可以通过运行<code>go env</code>查看是否安装成功</p>
</blockquote>
<h3 id="关于GOROOT和GOPATH"><a href="#关于GOROOT和GOPATH" class="headerlink" title="关于GOROOT和GOPATH"></a>关于GOROOT和GOPATH</h3><h4 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h4><p>GOROOT就是你go的安装目录,使用Homebrew安装对应的目录就是<font color="DeepPink">/usr/local/Cellar/go/1.16.5/libexec</font>。</p>
<h4 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h4><p>GOPATH是go的工作目录。谈GOPATH时需要引入一个环境变量<code>GO111MODULE</code>。<br>写本文时的go安装版本为1.16.5。GO111MODULE的参数为off、on和auto,其不同值的表现行为如下:</p>
<ul>
<li>auto (默认值)<ul>
<li>当项目路径(go.mod)在GOPATH外时，其行为等同于GO111MODULE=on。这意味着可以将代码仓库存储于GOPATH之外</li>
<li>当项目路径在GOPATH内，并且没有go.mod文件存在时，其行为等同于GO111MODULE=off</li>
</ul>
</li>
<li>off<br>无模块支持，go会从GOPATH和vender文件夹寻找包</li>
<li>on<br>模块支持,go会忽略GOPATH和vender文件夹，只根据<font color="DeepPink">go.mod</font>下载依赖。</li>
</ul>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>微软Doc|Go入门</title>
    <url>/posts/eb7fce26/</url>
    <content><![CDATA[<p><a href="https://docs.microsoft.com/zh-cn/learn/paths/go-first-steps/">微软-Go入门</a></p>
<span id="more"></span>
<details>
<summary>目录</summary>

<ul>
<li><a href="#%E5%A3%B0%E6%98%8E%E5%92%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F">声明和使用变量</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F">初始化变量</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F">通过多种方式初始化变量</a></li>
<li><a href="#%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F">声明常量</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a><ul>
<li><a href="#%E6%95%B4%E6%95%B0%E6%95%B0%E5%AD%97">整数数字</a></li>
<li><a href="#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AD%97">浮点数字</a></li>
<li><a href="#%E5%B8%83%E5%B0%94%E5%9E%8B">布尔型</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E9%BB%98%E8%AE%A4%E5%80%BC">默认值</a></li>
</ul>
</li>
<li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul>
<li><a href="#main%E5%87%BD%E6%95%B0">main函数</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0">自定义函数</a></li>
<li><a href="#%E6%9B%B4%E6%94%B9%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%80%BC%E6%8C%87%E9%92%88">更改函数参数值(指针)</a></li>
</ul>
</li>
<li><a href="#%E5%9C%A8go%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%8E%A7%E5%88%B6%E6%B5%81">在GO中使用控制流</a><ul>
<li><a href="#defer%E5%87%BD%E6%95%B0">defer函数</a></li>
<li><a href="#panic%E5%87%BD%E6%95%B0">panic函数</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul>
<li><a href="#%E6%95%B0%E7%BB%84">数组</a></li>
<li><a href="#%E5%88%87%E7%89%87">切片</a></li>
<li><a href="#%E6%98%A0%E5%B0%84">映射</a></li>
</ul>
</li>
<li><a href="#goroutine">goroutine</a></li>
<li><a href="#channel">channel</a><ul>
<li><a href="#%E6%97%A0%E7%BC%93%E5%86%B2-channel-%E4%B8%8E%E6%9C%89%E7%BC%93%E5%86%B2-channel">无缓冲 channel 与有缓冲 channel</a></details>
### 声明和使用变量
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明单个变量</span></span><br><span class="line"><span class="keyword">var</span> firstName <span class="keyword">string</span></span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> firstName, lastName <span class="keyword">string</span></span><br><span class="line"><span class="comment">// 声明不同类型变量</span></span><br><span class="line"><span class="keyword">var</span> firstName, lastName <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName, lastName <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定类型初始化变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName <span class="keyword">string</span> = <span class="string">&quot;John&quot;</span></span><br><span class="line">    lastName  <span class="keyword">string</span> = <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age       <span class="keyword">int</span>    = <span class="number">32</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 不指定类型初始化变量，Go会推断出类型</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName = <span class="string">&quot;John&quot;</span></span><br><span class="line">    lastName  = <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age       = <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="通过多种方式初始化变量"><a href="#通过多种方式初始化变量" class="headerlink" title="通过多种方式初始化变量"></a>通过多种方式初始化变量</h3><p>在 Go 中，你可以在单行中声明和初始化变量。 使用逗号将每个变量名称隔开，并对每个值执行相同的操作（按同一顺序），如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName, lastName, age = <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>, <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>还可以通过另一种方式来声明和初始化变量。 此方法是在 Go 中执行此操作的最常见方法。 以下是我们使用的同一个示例说明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName, lastName := <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age := <span class="number">32</span></span><br><span class="line">    <span class="built_in">println</span>(firstName, lastName, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上述代码，确认此方法能否声明和初始化变量。</p>
<p>请注意，在定义变量名称后，需要在此处加入一个冒号等于号 (:=) 和相应的值。 使用冒号等于号时，要声明的变量必须是新变量。 如果使用冒号等于号并已经声明该变量，将不会对程序进行编译。 继续尝试。</p>
<p>最终，你能在函数内使用冒号等于号。 在声明函数外的变量时，必须使用 var 关键字执行此操作。 如果你不熟悉函数，请不要担心。 我们会在后续单元中介绍函数。</p>
<h3 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HTTPStatusOK = <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>Go 是一种强类型语言。 这意味着你声明的每个变量都绑定到特定的数据类型，并且只接受与此类型匹配的值。<br>Go 有四类数据类型：</p>
<ul>
<li>基本类型：数字、字符串和布尔值</li>
<li>聚合类型：数组和结构</li>
<li>引用类型：指针、切片、映射、函数和通道</li>
<li>接口类型：接口</li>
</ul>
<h4 id="整数数字"><a href="#整数数字" class="headerlink" title="整数数字"></a>整数数字</h4><ul>
<li>int、int8、int16、int32 和 int64 类型,其大小分别为 8、16、32 或 64 位的整数。</li>
<li>uint、uint8、uint16、uint32 和 uint64 类型<h4 id="浮点数字"><a href="#浮点数字" class="headerlink" title="浮点数字"></a>浮点数字</h4></li>
<li>float32、fload64<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4></li>
<li>true、false<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4>字符串转义符</li>
<li>\n：新行</li>
<li>\r：回车符</li>
<li>\t：选项卡</li>
<li>&#39;：单引号</li>
<li>&quot;：双引号</li>
<li>\：反斜杠<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4></li>
<li>int 类型的 0（及其所有子类型，如 int64）</li>
<li>float32 和 float64 类型的 +0.000000e+000</li>
<li>bool 类型的 false</li>
<li>string 类型的空值<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4>Go中所有可执行程序都具有此函数，因为他是程序的起点。<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameters)</span> <span class="params">(results)</span></span> &#123;</span><br><span class="line">    body-content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(number1 <span class="keyword">string</span>, number2 <span class="keyword">string</span>)</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    int1, _ := strconv.Atoi(number1)</span><br><span class="line">    int2, _ := strconv.Atoi(number2)</span><br><span class="line">    result = int1 + int2</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(number1 <span class="keyword">string</span>, number2 <span class="keyword">string</span>)</span> <span class="params">(sum <span class="keyword">int</span>, mul <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    int1, _ := strconv.Atoi(number1)</span><br><span class="line">    int2, _ := strconv.Atoi(number2)</span><br><span class="line">    sum = int1 + int2</span><br><span class="line">    mul = int1 * int2</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="更改函数参数值-指针"><a href="#更改函数参数值-指针" class="headerlink" title="更改函数参数值(指针)"></a>更改函数参数值(指针)</h4>将值传递给函数时，该函数中的每个更改都不会影响调用方。 Go 是“按值传递”编程语言。 这意味着每次向函数传递值时，Go 都会使用该值并创建本地副本（内存中的新变量）。 在函数中对该变量所做的更改都不会影响你向函数发送的更改。<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName := <span class="string">&quot;John&quot;</span></span><br><span class="line">    updateName(firstName)</span><br><span class="line">    <span class="built_in">println</span>(firstName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    name = <span class="string">&quot;David&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
即使你在函数中将该名称更改为 David，输出仍为 John。 由于 updateName 函数中的更改仅会修改本地副本，因此输出不会发生变化。 Go 传递变量的值，而不是变量本身。</li>
</ul>
<p>如果你希望在 updateName 函数中进行的更改会影响 main 函数中的 firstName 变量，则需要使用指针。 指针 是包含另一个变量的内存地址的变量。 当你发送指向某个函数的指针时，不会传递值，而是传递地址内存。 因此，对该变量所做的每个更改都会影响调用方。</p>
<p>在 Go 中，有两个运算符可用于处理指针：</p>
<p>&amp; 运算符使用其后对象的地址。</p>
<ul>
<li>运算符取消引用指针。 也就是说，你可以前往指针中包含的地址访问其中的对象。<br><code>*可以看成是&amp;的逆运算</code><br>让我们修改前面的示例，以阐明指针的工作方式：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName := <span class="string">&quot;John&quot;</span></span><br><span class="line">    updateName(&amp;firstName)</span><br><span class="line">    <span class="built_in">println</span>(firstName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateName</span><span class="params">(name *<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    *name = <span class="string">&quot;David&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行前面的代码。 请注意，输出现在显示的是 David，而不是 John。</li>
</ul>
<p>首先要做的就是修改函数的签名，以指明你要接收指针。 为此，请将参数类型从 string 更改为 <em>string。 （后者仍是字符串，但现在它是指向字符串 的 指针。）然后，将新值分配给该变量时，需要在该变量的左侧添加星号 (</em>) 以暂停该变量的值。 调用 updateName 函数时，系统不会发送值，而是发送变量的内存地址。 这就是前面的代码在变量左侧带有 &amp; 符号的原因。</p>
<h3 id="在GO中使用控制流"><a href="#在GO中使用控制流" class="headerlink" title="在GO中使用控制流"></a>在GO中使用控制流</h3><blockquote>
<p>Go不支持三元if语句(即三元表达式)<br>Go 支持if、Switch、for，Go没有while关键字</p>
</blockquote>
<h4 id="defer函数"><a href="#defer函数" class="headerlink" title="defer函数"></a>defer函数</h4><p>在 Go 中，defer 语句会推迟函数（包括任何参数）的运行，直到包含 defer 语句的函数完成。 通常情况下，当你想要避免忘记任务（例如关闭文件或运行清理进程）时，可以推迟某个函数的运行。<br>可以根据需要推迟任意多个函数。 defer 语句按逆序运行，先运行最后一个，最后运行第一个。<br>通过运行以下示例代码来查看此模式的工作原理：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;deferred&quot;</span>, -i)</span><br><span class="line">        fmt.Println(<span class="string">&quot;regular&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是代码输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">regular 1</span><br><span class="line">regular 2</span><br><span class="line">regular 3</span><br><span class="line">regular 4</span><br><span class="line">deferred -4</span><br><span class="line">deferred -3</span><br><span class="line">deferred -2</span><br><span class="line">deferred -1</span><br></pre></td></tr></table></figure>

<h4 id="panic函数"><a href="#panic函数" class="headerlink" title="panic函数"></a>panic函数</h4><p>运行时错误会使 Go 程序崩溃，例如尝试通过使用超出范围的索引或取消引用 nil 指针来访问数组。 你也可以强制程序崩溃。<br>内置 panic() 函数可以停止 Go 程序中的正常控制流。 当你使用 panic 调用时，任何延迟的函数调用都将正常运行。 进程会在堆栈中继续，直到所有函数都返回。 然后，程序会崩溃并记录日志消息。 此消息包含错误信息和堆栈跟踪，有助于诊断问题的根本原因。<br>调用 panic() 函数时，可以添加任何值作为参数。 通常，你会发送一条错误消息，说明为什么会进入紧急状态。<br>例如，下面的代码将 panic 和 defer 函数组合在一起。 尝试运行此代码以了解控制流的中断。 请注意，清理过程仍会运行。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Go 中的数组是一种特定类型且长度固定的数据结构。 它们可具有零个或多个元素，你必须在声明或初始化它们时定义大小。 此外，它们一旦创建，就无法调整大小。 鉴于这些原因，数组在 Go 程序中并不常用，但它们是切片和映射的基础。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">cities := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;Berlin&quot;</span>, <span class="string">&quot;Madrid&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数组中的省略号</strong><br>如果你不知道你将需要多少个位置，但知道你将具有多少数据，那么还有一种声明和初始化数组的方法是使用省略号 (…)，如下例所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q := [...]int&#123;1, 2, 3&#125;</span><br><span class="line">cities := [...]string&#123;&quot;New York&quot;, &quot;Paris&quot;, &quot;Berlin&quot;, &quot;Madrid&quot;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p><strong>数组的长度是固定的，切片的大小是动态的，不固定的</strong><br>切片运算符<code>s[i:p]</code><br>表示s中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片<br><strong>注意，切片只能引用元素的子集</strong></p>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p>大体上来说，Go 中的映射是一个哈希表，是键值对的集合。 映射中所有的键都必须具有相同的类型，它们的值也是如此。 不过，可对键和值使用不同的类型。 例如，键可以是数字，值可以是字符串。 若要访问映射中的特定项，可引用该项的键。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">studentsAge := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">&quot;john&quot;</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="string">&quot;bob&quot;</span>:  <span class="number">31</span>,</span><br><span class="line">&#125;</span><br><span class="line">studentsAge := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">studentsAge[<span class="string">&quot;bob&quot;</span>] = <span class="number">31</span></span><br><span class="line"><span class="built_in">delete</span>(studentsAge, <span class="string">&quot;bob&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, age := <span class="keyword">range</span> studentsAge &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\t%d\n&quot;</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><p><strong>不是通过共享内存通信，而是通过通信共享内存</strong><br>goroutine 是轻量线程中的并发活动，而不是在操作系统中进行的传统活动。 假设你有一个写入输出的程序和另一个计算两个数字相加的函数。 一个并发程序可以有数个 goroutine 同时调用这两个函数。</p>
<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><h4 id="无缓冲-channel-与有缓冲-channel"><a href="#无缓冲-channel-与有缓冲-channel" class="headerlink" title="无缓冲 channel 与有缓冲 channel"></a>无缓冲 channel 与有缓冲 channel</h4><p>现在，你可能想知道何时使用这两种类型。 这完全取决于你希望 goroutine 之间的通信如何进行。 无缓冲 channel 同步通信。 它们保证每次发送数据时，程序都会被阻止，直到有人从 channel 中读取数据。<br>相反，有缓冲 channel 将发送和接收操作解耦。 它们不会阻止程序，但你必须小心使用，因为可能最终会导致死锁（如前文所述）。 使用无缓冲 channel 时，可以控制可并发运行的 goroutine 的数量。 例如，你可能要对 API 进行调用，并且想要控制每秒执行的调用次数。 否则，你可能会被阻止。</p>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO教程</tag>
      </tags>
  </entry>
  <entry>
    <title>CEPH客户端版本升级</title>
    <url>/posts/bab85c8a/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -q -O- &#x27;https://download.ceph.com/keys/release.asc&#x27; | sudo apt-key add -</span><br><span class="line">echo deb https://download.ceph.com/debian-nautilus/ $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/ceph.list</span><br><span class="line">apt update</span><br><span class="line">apt install ceph-common</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CEPH</category>
      </categories>
  </entry>
  <entry>
    <title>s3-exporter实现</title>
    <url>/posts/f7f721f2/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	rootDir <span class="keyword">string</span></span><br><span class="line">	depth   <span class="keyword">int</span></span><br><span class="line">	port    <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BucketUsage <span class="keyword">struct</span> &#123;</span><br><span class="line">	Bucket <span class="keyword">string</span> <span class="string">`json:&quot;bucket&quot;`</span></span><br><span class="line">	Owner  <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">	Usage  <span class="keyword">struct</span> &#123;</span><br><span class="line">		RGWMain <span class="keyword">struct</span> &#123;</span><br><span class="line">			Size         <span class="keyword">float64</span> <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">			SizeActual   <span class="keyword">float64</span> <span class="string">`json:&quot;size_actual&quot;`</span></span><br><span class="line">			SizeUtilized <span class="keyword">float64</span> <span class="string">`json:&quot;size_utilized&quot;`</span></span><br><span class="line">			NumObjects   <span class="keyword">float64</span> <span class="string">`json:&quot;num_objects&quot;`</span></span><br><span class="line">		&#125; <span class="string">`json:&quot;rgw.main&quot;`</span></span><br><span class="line">	&#125; <span class="string">`json:&quot;usage&quot;`</span></span><br><span class="line">	BucketQuota <span class="keyword">struct</span> &#123;</span><br><span class="line">		Enable     <span class="keyword">bool</span>    <span class="string">`json:&quot;enabled&quot;`</span></span><br><span class="line">		MaxSize    <span class="keyword">float64</span> <span class="string">`json:&quot;max_size&quot;`</span></span><br><span class="line">		MaxSizeKB  <span class="keyword">float64</span> <span class="string">`json:&quot;max_size_kb&quot;`</span></span><br><span class="line">		MaxObjects <span class="keyword">float64</span> <span class="string">`json:&quot;max_objects&quot;`</span></span><br><span class="line">	&#125; <span class="string">`json:&quot;bucket_quota&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> namespace <span class="keyword">string</span> = <span class="string">&quot;unionstor_radosgw_usage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Collector <span class="keyword">struct</span> &#123;</span><br><span class="line">	mu                      sync.Mutex</span><br><span class="line">	BucketSizeBytes         *prometheus.GaugeVec</span><br><span class="line">	BucketSizeUtilizedBytes *prometheus.GaugeVec</span><br><span class="line">	BucketNumsObjects       *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaEnable       *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxSize      *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxSizeBytes *prometheus.GaugeVec</span><br><span class="line">	BucketQuotaMaxObjects   *prometheus.GaugeVec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exec_cmd</span><span class="params">(command <span class="keyword">string</span>, timeout <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Second*time.Duration(timeout))</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">	cmd := exec.CommandContext(ctx, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, command)</span><br><span class="line">	out, err := cmd.CombinedOutput()</span><br><span class="line">	<span class="keyword">return</span> out, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCollector</span><span class="params">()</span> *<span class="title">Collector</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Collector&#123;</span><br><span class="line">		BucketSizeBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_size_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_size_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketSizeUtilizedBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_size_utilized_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_size_utilized_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketNumsObjects: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_num_objects&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_num_objects&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaEnable: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_enable&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_enable&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxSize: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_size&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_size&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxSizeBytes: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_size_bytes&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_size_bytes&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">		BucketQuotaMaxObjects: prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">			Namespace: namespace,</span><br><span class="line">			Name:      <span class="string">&quot;bucket_quota_max_objects&quot;</span>,</span><br><span class="line">			Help:      <span class="string">&quot;bucket_quota_max_objects&quot;</span>,</span><br><span class="line">		&#125;, []<span class="keyword">string</span>&#123;<span class="string">&quot;bucket&quot;</span>, <span class="string">&quot;owner&quot;</span>&#125;),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">collectorList</span><span class="params">()</span> []<span class="title">prometheus</span>.<span class="title">Collector</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> []prometheus.Collector&#123;</span><br><span class="line">		c.BucketSizeBytes,</span><br><span class="line">		c.BucketSizeUtilizedBytes,</span><br><span class="line">		c.BucketNumsObjects,</span><br><span class="line">		c.BucketQuotaEnable,</span><br><span class="line">		c.BucketQuotaMaxSize,</span><br><span class="line">		c.BucketQuotaMaxSizeBytes,</span><br><span class="line">		c.BucketQuotaMaxObjects,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">Describe</span><span class="params">(ch <span class="keyword">chan</span>&lt;- *prometheus.Desc)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, metric := <span class="keyword">range</span> c.collectorList() &#123;</span><br><span class="line">		metric.Describe(ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">Collect</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span></span> &#123;</span><br><span class="line">	c.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">	<span class="keyword">if</span> err := c.collect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, metric := <span class="keyword">range</span> c.collectorList() &#123;</span><br><span class="line">		metric.Collect(ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">collect</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	cmd := <span class="string">&quot;radosgw-admin bucket stats&quot;</span></span><br><span class="line">	cmdRet, err := exec_cmd(cmd, <span class="number">30</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;exec bucket stats error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	bucketsUsage := []BucketUsage&#123;&#125;</span><br><span class="line">	err = json.Unmarshal(cmdRet, &amp;bucketsUsage)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;parse cmd returen error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	c.BucketSizeBytes.Reset()</span><br><span class="line">	c.BucketSizeUtilizedBytes.Reset()</span><br><span class="line">	c.BucketNumsObjects.Reset()</span><br><span class="line">	c.BucketQuotaEnable.Reset()</span><br><span class="line">	c.BucketQuotaMaxSize.Reset()</span><br><span class="line">	c.BucketQuotaMaxSizeBytes.Reset()</span><br><span class="line">	c.BucketQuotaMaxObjects.Reset()</span><br><span class="line">	<span class="keyword">for</span> _, bucketUsage := <span class="keyword">range</span> bucketsUsage &#123;</span><br><span class="line">		bucketName := bucketUsage.Bucket</span><br><span class="line">		bucketOwner := bucketUsage.Owner</span><br><span class="line">		bucketSizeBytes := bucketUsage.Usage.RGWMain.SizeActual</span><br><span class="line">		bucketSizeUtilizedBytes := bucketUsage.Usage.RGWMain.SizeUtilized</span><br><span class="line">		bucketObjects := bucketUsage.Usage.RGWMain.NumObjects</span><br><span class="line">		<span class="keyword">var</span> bucketQuotaEnable <span class="keyword">float64</span> = <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> bucketUsage.BucketQuota.Enable &#123;</span><br><span class="line">			bucketQuotaEnable = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		bucketQuotaMaxSize := bucketUsage.BucketQuota.MaxSize</span><br><span class="line">		bucketQuotaMaxSizeBytes := bucketUsage.BucketQuota.MaxSizeKB</span><br><span class="line">		bucketQuotaMaxObjects := bucketUsage.BucketQuota.MaxObjects</span><br><span class="line">		c.BucketSizeBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketSizeBytes)</span><br><span class="line">		c.BucketSizeUtilizedBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketSizeUtilizedBytes)</span><br><span class="line">		c.BucketNumsObjects.WithLabelValues(bucketName, bucketOwner).Set(bucketObjects)</span><br><span class="line">		c.BucketQuotaEnable.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaEnable)</span><br><span class="line">		c.BucketQuotaMaxSize.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxSize)</span><br><span class="line">		c.BucketQuotaMaxSizeBytes.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxSizeBytes)</span><br><span class="line">		c.BucketQuotaMaxObjects.WithLabelValues(bucketName, bucketOwner).Set(bucketQuotaMaxObjects)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.StringVar(&amp;rootDir, <span class="string">&quot;path&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;A cephfs path&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;depth, <span class="string">&quot;depth&quot;</span>, <span class="number">2</span>, <span class="string">&quot;default depth&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;port, <span class="string">&quot;port&quot;</span>, <span class="number">8080</span>, <span class="string">&quot;default exporter port&quot;</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line">	prometheus.MustRegister(NewCollector())</span><br><span class="line">	http.Handle(<span class="string">&quot;/metrics&quot;</span>, promhttp.Handler())</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:&quot;</span>+strconv.Itoa(port), <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CEPH</category>
        <category>S3</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>for循环中i++和++i的区别和效率</title>
    <url>/posts/2e389ba/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在看到一些书籍和视频中发现for循环里面有写++i,而不是i++</p>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>for(A,B,C){<br>  D<br>}<br>执行顺序:</p>
<ol>
<li>进入循环执行A</li>
<li>执行B</li>
<li>执行D</li>
<li>执行C</li>
<li>再B，再D，再C直至退出循环</li>
</ol>
<p>即可知上述循环等同于:<br>for(A,B,){<br>  D<br>  C<br>}</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>i++</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<p>++i</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">j = i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>

<p>从上述差别中可以看到是有效率上面的差别</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>关联数组详解</title>
    <url>/posts/485233ea/</url>
    <content><![CDATA[<h1 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h1><p>　　请记住,数组是对象的特殊形式。使用方括号访问数组元素就像使用方括号访问对象的属性一样。JavaScript将指定的数字索引值转换成字符串—-索引值1变成”1”—-然后将其作为属性名来使用。<br>　　数组的特别之处在于，当使用小于2^32的非负整数作为属性名时数组会自动维护其length属性值。<br>　　注意，可以使用负数和非整数来索引数组。这种情况加，数值转换为字符串，字符串作为属性名来用。既然名字不是非负整数，它就只能当做常规的对象属性，而非数组的索引。</p>
<p>–以上摘抄&lt;Javascript权威指南&gt;</p>
<span id="more"></span>

<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="稀松数组"><a href="#稀松数组" class="headerlink" title="稀松数组"></a>稀松数组</h2><p>稀松数组就是包含从0开始的不联系索引的数组。<br><code>简单来说就是数组元素的个数和数组长度不一致</code></p>
<h2 id="密集数组"><a href="#密集数组" class="headerlink" title="密集数组"></a>密集数组</h2><h2 id="关联数组-数组下标为字符串"><a href="#关联数组-数组下标为字符串" class="headerlink" title="关联数组(数组下标为字符串)"></a>关联数组(数组下标为字符串)</h2><h2 id="关联数组-数组下标为数值-即通常情况下所说的数组"><a href="#关联数组-数组下标为数值-即通常情况下所说的数组" class="headerlink" title="关联数组(数组下标为数值,即通常情况下所说的数组)"></a>关联数组(数组下标为数值,即通常情况下所说的数组)</h2><h1 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h1><h2 id="如何创建数组"><a href="#如何创建数组" class="headerlink" title="如何创建数组"></a>如何创建数组</h2><h3 id="稀松数组-1"><a href="#稀松数组-1" class="headerlink" title="稀松数组"></a>稀松数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式生成稀松数组</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// 数组没有元素，但是length为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式生成稀松数组</span></span><br><span class="line"><span class="keyword">let</span> a =[]</span><br><span class="line">a[<span class="number">1000</span>] = <span class="number">1</span> <span class="comment">// 数组长度为1001,但是实际元素只有1个</span></span><br></pre></td></tr></table></figure>
<p><strong>关于JavaScript权威指南p145的错误</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [,,,];<span class="comment">//数组是[undefined,undefined,undefined]  == &gt; 这里是 错误的，应该是都是empty</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a1  <span class="comment">//true:a1在索引0处有一个元素。  ==&gt; 这里应该是false</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a2  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="密集数组-1"><a href="#密集数组-1" class="headerlink" title="密集数组"></a>密集数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Array</span>.apply(<span class="literal">null</span>,<span class="built_in">Array</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a =[]</span><br><span class="line">a[<span class="string">&quot;aa&quot;</span>] = <span class="string">&quot;aaa&quot;</span></span><br><span class="line">a[<span class="string">&quot;bb&quot;</span>] = <span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="comment">// a =&gt; [aa:&quot;aaa&quot;,bb:&quot;bbb&quot;]</span></span><br><span class="line"><span class="comment">// a.length = 0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>引用类型和基本类型</title>
    <url>/posts/d3b053f/</url>
    <content><![CDATA[<h1 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h1><p>基本类型: Number Booleam String undefined null<br>引用类型: Object Function<br>基本类型的数据是放在栈内存中，而引用类型的数据是放在堆内存中</p>
<span id="more"></span>

<h1 id="JS传参差别-按值还是按址"><a href="#JS传参差别-按值还是按址" class="headerlink" title="JS传参差别 按值还是按址?"></a>JS传参差别 按值还是按址?</h1><h2 id="复制变量"><a href="#复制变量" class="headerlink" title="复制变量"></a>复制变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span> | <span class="subst">$&#123;b&#125;</span>`</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj1.num = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> obj2 = obj1</span><br><span class="line">obj2.mum =<span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj1.mun&#125;</span> | <span class="subst">$&#123;obj2.mum&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p>基础类型由于是放在栈内存中，每个变量都有自己的值，所以其中一个值改变了，不影响另外一个。<br>引用类型其实就是在栈内存中存储了一个指针，这个指针指向的是存储地址，变量复制其实就是把这个地址复制给了另外一个变量，如果其中一个将这个对象修改了，那么另外一个也会改变。</p>
<h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><blockquote>
<p>到底是按值传参还是按址传参<br>示例1:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  num += <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> result = add(count)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;count&#125;</span> | <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// 20 | 30</span></span><br></pre></td></tr></table></figure>
<p>按值传递,秒懂！</p>
<p>示例2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">let</span> newPerson = setName(person)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> | <span class="subst">$&#123;newPerson.name&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// aaa | aaa</span></span><br></pre></td></tr></table></figure>
<p>示例3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()  <span class="comment">// 如果是按引用传递的,此处传参进来obj应该被重新引用新的内存单元</span></span><br><span class="line">  obj.name = <span class="string">&#x27;ccc&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">let</span> newPerson = setName(person)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> | <span class="subst">$&#123;newPerson.name&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// aaa | ccc</span></span><br></pre></td></tr></table></figure>
<p>// TODO  还是有点懵逼<br>// 还有new出来的实例</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>kubectl|patch命令使用</title>
    <url>/posts/e6afd30a/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>kubectl patch (-f FILENAME | TYPE NAME) -p PATCH</code></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Partially update a node using a strategic merge patch. Specify the patch as JSON.</span><br><span class="line">kubectl patch node k8s-node-1 -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;unschedulable&quot;:true&#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># Partially update a node using a strategic merge patch. Specify the patch as YAML.</span><br><span class="line">kubectl patch node k8s-node-1 -p $&#x27;spec:\n unschedulable: true&#x27;</span><br><span class="line"></span><br><span class="line"># Partially update a node identified by the type and name specified in &quot;node.json&quot; using strategic mergepatch.</span><br><span class="line">kubectl patch -f node.json -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;unschedulable&quot;:true&#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># Update a container&#x27;s image; spec.containers[*].name is required because it&#x27;s a merge key.</span><br><span class="line">kubectl patch pod valid-pod -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;name&quot;:&quot;kubernetes-serve-hostname&quot;,&quot;image&quot;:&quot;newimage&quot;&#125;]&#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># Update a container&#x27;s image using a json patch with positional arrays.</span><br><span class="line">kubectl patch pod valid-pod --type=&#x27;json&#x27; -p=&#x27;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/containers/0/image&quot;,&quot;value&quot;:&quot;newimage&quot;&#125;]&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f, --filename=[]: Filename, directory, or URL to a file identifying the resource to update</span><br><span class="line">    --include-extended-apis[=true]: If true, include definitions of new APIs via calls to the APIserver. [default true]</span><br><span class="line">-o, --output=&quot;&quot;: Output mode. Use &quot;-o name&quot; for shorter output (resource/name).</span><br><span class="line">-p, --patch=&quot;&quot;: The patch to be applied to the resource JSON file.</span><br><span class="line">    --record[=false]: Record current kubectl command in the resource annotation.</span><br><span class="line">-R, --recursive[=false]: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.</span><br><span class="line">    --type=&quot;strategic&quot;: The type of patch being provided; one of [json merge strategic]</span><br></pre></td></tr></table></figure>

<p><strong>//TODO 增加一些实战示例</strong></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>kubectl命令</tag>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S|Secret详解</title>
    <url>/posts/5a8a6c8d/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Secret解决了密码、token、秘钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或者环境变量的方式使用。</p>
<h2 id="Secret类型"><a href="#Secret类型" class="headerlink" title="Secret类型"></a>Secret类型</h2><ul>
<li>Service Account：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的 /run/secrets/kubernetes.io/serviceaccount 目录中。</li>
<li>Opaque：base64编码格式的Secret，用来存储密码、秘钥等。</li>
<li>kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。<blockquote>
<p>本文主要使用Opaque</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行直接创建</span></span><br><span class="line">kubectl create secret generic my-secret --from-literal=username=root --from-literal=password=root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用文件创建</span></span><br><span class="line">echo -n &quot;root&quot; &gt; ./username</span><br><span class="line">echo -n &quot;root&quot; &gt; ./password</span><br><span class="line">kubectl create secret generic my-secret --from-file=./username --from-file=./password</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先对字符串进行base64加密</span></span><br><span class="line">echo -n &#x27;root&#x27; | base64</span><br><span class="line">cm9vdA==</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑资源文件</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: my-secret</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  username: base64</span><br><span class="line">  password: base64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解密</span></span><br><span class="line">kubectl get secrets my-secret -o jsonpath=&quot;&#123;.data.username&#125;&quot; | base64 -d</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
        <category>Secret</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S中port|nodePort|targetPort概念的区分</title>
    <url>/posts/68b4a711/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>port是service的端口</li>
<li>targetPort是容器的端口</li>
<li>nodePort是容器所在宿主机的端口</li>
</ul>
<span id="more"></span>

<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>集群内部服务暴露的端口，可以使用clusterIp:port来访问pod暴露的服务</p>
<h3 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h3><p>最终容器上面暴露的服务端口，应用监听的端口</p>
<h3 id="nodePort"><a href="#nodePort" class="headerlink" title="nodePort"></a>nodePort</h3><p>当服务类型为NodePort时，会在每个节点上暴露一个端口,可以他通过nodeIp:nodePort从集群外部访问服务。<br>nodeport默认端口范围为(30000-32767)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>nodePort集群外部访问,pod为集群内部pod相互通信端口,targetPort字面意思就是容器暴露端口。</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令|cut</title>
    <url>/posts/5b806bba/</url>
    <content><![CDATA[<h1 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h1><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</span><br><span class="line">-c ：以字符为单位进行分割。</span><br><span class="line">-d ：自定义分隔符，默认为制表符。</span><br><span class="line">-f ：与-d一起使用，指定显示哪个区域。</span><br><span class="line">-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</span><br></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com  -c1 | grep PING | cut -d &#x27;(&#x27; -f2| cut -d &#x27;)&#x27; -f1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令|yq</title>
    <url>/posts/e6efe92f/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>yq是一个yaml的命令行解析工具。他有点像jq处理json一样。</p>
<blockquote>
<p>当前版本为4.x,4版本和3版本相差很大，请注意语法。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  yq [flags]</span><br><span class="line">  yq [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  eval             Apply the expression to each document in each yaml file in sequence</span><br><span class="line">  eval-all         Loads _all_ yaml documents of _all_ yaml files and runs expression once</span><br><span class="line">  help             Help about any command</span><br><span class="line">  shell-completion Generate completion script</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -C, --colors                force print with colors</span><br><span class="line">  -e, --exit-status           set exit status if there are no matches or null or false is returned</span><br><span class="line">  -f, --front-matter string   (extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact</span><br><span class="line">  -h, --help                  help for yq</span><br><span class="line">  -I, --indent int            sets indent level for output (default 2)</span><br><span class="line">  -i, --inplace               update the yaml file inplace of first yaml file given.</span><br><span class="line">  -M, --no-colors             force print with no colors</span><br><span class="line">  -N, --no-doc                Don&#x27;t print document separators (---)</span><br><span class="line">  -n, --null-input            Don&#x27;t read input, simply evaluate the expression given. Useful for creating yaml docs from scratch.</span><br><span class="line">  -P, --prettyPrint           pretty print, shorthand for &#x27;... style = &quot;&quot;&#x27;</span><br><span class="line">  -j, --tojson                output as json. Set indent to 0 to print json in one line.</span><br><span class="line">      --unwrapScalar          unwrap scalar, print the value with no quotes, colors or comments (default true)</span><br><span class="line">  -v, --verbose               verbose mode</span><br><span class="line">  -V, --version               Print version information and quit</span><br><span class="line"></span><br><span class="line">Use &quot;yq [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>

<p><strong>//TODO 补充实例</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>SHELL参数的含义</title>
    <url>/posts/1b4c4aa3/</url>
    <content><![CDATA[<ul>
<li>$0<br>当前脚本的文件名</li>
<li>$n<br>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</li>
<li>$#<br>传递给脚本或函数的参数个数。</li>
<li>$*<br>传递给脚本或函数的所有参数。</li>
<li>$@<br>传递给脚本或函数的所有参数。</li>
<li>$* 和 $@ 的区别<ul>
<li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “2” “n” 的形式输出所有参数</li>
<li>当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … n”的形式输出所有参数；”n”的形式输出所有参数；”n”的形式输出所有参数；”@” 会将各个参数分开，以”$1” “2”…”n” 的形式输出所有参数。</li>
</ul>
</li>
<li>$?<br>上个命令的退出状态，或函数的返回值。</li>
<li>$$<br>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID</li>
</ul>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
  </entry>
  <entry>
    <title>NODEJS|child_process模块</title>
    <url>/posts/1375a0ac/</url>
    <content><![CDATA[<p>child_process.spawn() 方法异步衍生子进程，不会阻塞 Node.js 事件循环。 child_process.spawnSync() 函数以同步方式提供等效的功能，其会阻塞事件循环，直到衍生的进程退出或终止。</p>
<p>为方便起见，child_process 模块提供了一些同步和异步方法替代 child_process.spawn() 和 child_process.spawnSync()。 这些替代方法中的每一个都是基于 child_process.spawn() 或 child_process.spawnSync() 实现。</p>
<ul>
<li>child_process.exec(): 衍生 shell 并在该 shell 中运行命令，完成后将 stdout 和 stderr 传给回调函数。</li>
<li>child_process.execFile(): 与 child_process.exec() 类似，不同之处在于，默认情况下，它直接衍生命令，而不先衍生 shell。</li>
<li>child_process.fork(): 衍生新的 Node.js 进程并使用建立的 IPC 通信通道（其允许在父子进程之间发送消息）调用指定的模块。</li>
<li>child_process.execSync(): child_process.exec() 的同步版本，其将阻塞 Node.js 事件循环。</li>
<li>child_process.execFileSync(): child_process.execFile() 的同步版本，其将阻塞 Node.js 事件循环。<br>对于某些情况，例如自动化 shell 脚本，同步的方法可能更方便。 但是，在许多情况下，由于在衍生的进程完成前会停止事件循环，同步方法会对性能产生重大影响。</li>
</ul>
<p>– 摘自<a href="http://nodejs.cn/api/child_process.html">NODEJS文档-child_process</a></p>
]]></content>
      <categories>
        <category>NODEJS</category>
      </categories>
      <tags>
        <tag>NODEJS</tag>
      </tags>
  </entry>
  <entry>
    <title>通过nodejs查看http的STAUS_CODE</title>
    <url>/posts/9a2f555f/</url>
    <content><![CDATA[<p>HTTP核心模块是Node.js网络的关键模块,该模块提供了一些属性、方法以及类。<br><code>http.STATUS_CODES此属性列出了所有的HTTP状态代码以及其描述</code></p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ node</span><br><span class="line">Welcome to Node.js v14.17.3.</span><br><span class="line">Type &quot;.help&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> require(<span class="string">&#x27;http&#x27;</span>).STATUS_CODES</span></span><br><span class="line">&#123;</span><br><span class="line">  &#x27;100&#x27;: &#x27;Continue&#x27;,</span><br><span class="line">  &#x27;101&#x27;: &#x27;Switching Protocols&#x27;,</span><br><span class="line">  &#x27;102&#x27;: &#x27;Processing&#x27;,</span><br><span class="line">  &#x27;103&#x27;: &#x27;Early Hints&#x27;,</span><br><span class="line">  &#x27;200&#x27;: &#x27;OK&#x27;,</span><br><span class="line">  &#x27;201&#x27;: &#x27;Created&#x27;,</span><br><span class="line">  &#x27;202&#x27;: &#x27;Accepted&#x27;,</span><br><span class="line">  &#x27;203&#x27;: &#x27;Non-Authoritative Information&#x27;,</span><br><span class="line">  &#x27;204&#x27;: &#x27;No Content&#x27;,</span><br><span class="line">  &#x27;205&#x27;: &#x27;Reset Content&#x27;,</span><br><span class="line">  &#x27;206&#x27;: &#x27;Partial Content&#x27;,</span><br><span class="line">  &#x27;207&#x27;: &#x27;Multi-Status&#x27;,</span><br><span class="line">  &#x27;208&#x27;: &#x27;Already Reported&#x27;,</span><br><span class="line">  &#x27;226&#x27;: &#x27;IM Used&#x27;,</span><br><span class="line">  &#x27;300&#x27;: &#x27;Multiple Choices&#x27;,</span><br><span class="line">  &#x27;301&#x27;: &#x27;Moved Permanently&#x27;,</span><br><span class="line">  &#x27;302&#x27;: &#x27;Found&#x27;,</span><br><span class="line">  &#x27;303&#x27;: &#x27;See Other&#x27;,</span><br><span class="line">  &#x27;304&#x27;: &#x27;Not Modified&#x27;,</span><br><span class="line">  &#x27;305&#x27;: &#x27;Use Proxy&#x27;,</span><br><span class="line">  &#x27;307&#x27;: &#x27;Temporary Redirect&#x27;,</span><br><span class="line">  &#x27;308&#x27;: &#x27;Permanent Redirect&#x27;,</span><br><span class="line">  &#x27;400&#x27;: &#x27;Bad Request&#x27;,</span><br><span class="line">  &#x27;401&#x27;: &#x27;Unauthorized&#x27;,</span><br><span class="line">  &#x27;402&#x27;: &#x27;Payment Required&#x27;,</span><br><span class="line">  &#x27;403&#x27;: &#x27;Forbidden&#x27;,</span><br><span class="line">  &#x27;404&#x27;: &#x27;Not Found&#x27;,</span><br><span class="line">  &#x27;405&#x27;: &#x27;Method Not Allowed&#x27;,</span><br><span class="line">  &#x27;406&#x27;: &#x27;Not Acceptable&#x27;,</span><br><span class="line">  &#x27;407&#x27;: &#x27;Proxy Authentication Required&#x27;,</span><br><span class="line">  &#x27;408&#x27;: &#x27;Request Timeout&#x27;,</span><br><span class="line">  &#x27;409&#x27;: &#x27;Conflict&#x27;,</span><br><span class="line">  &#x27;410&#x27;: &#x27;Gone&#x27;,</span><br><span class="line">  &#x27;411&#x27;: &#x27;Length Required&#x27;,</span><br><span class="line">  &#x27;412&#x27;: &#x27;Precondition Failed&#x27;,</span><br><span class="line">  &#x27;413&#x27;: &#x27;Payload Too Large&#x27;,</span><br><span class="line">  &#x27;414&#x27;: &#x27;URI Too Long&#x27;,</span><br><span class="line">  &#x27;415&#x27;: &#x27;Unsupported Media Type&#x27;,</span><br><span class="line">  &#x27;416&#x27;: &#x27;Range Not Satisfiable&#x27;,</span><br><span class="line">  &#x27;417&#x27;: &#x27;Expectation Failed&#x27;,</span><br><span class="line">  &#x27;418&#x27;: &quot;I&#x27;m a Teapot&quot;,</span><br><span class="line">  &#x27;421&#x27;: &#x27;Misdirected Request&#x27;,</span><br><span class="line">  &#x27;422&#x27;: &#x27;Unprocessable Entity&#x27;,</span><br><span class="line">  &#x27;423&#x27;: &#x27;Locked&#x27;,</span><br><span class="line">  &#x27;424&#x27;: &#x27;Failed Dependency&#x27;,</span><br><span class="line">  &#x27;425&#x27;: &#x27;Too Early&#x27;,</span><br><span class="line">  &#x27;426&#x27;: &#x27;Upgrade Required&#x27;,</span><br><span class="line">  &#x27;428&#x27;: &#x27;Precondition Required&#x27;,</span><br><span class="line">  &#x27;429&#x27;: &#x27;Too Many Requests&#x27;,</span><br><span class="line">  &#x27;431&#x27;: &#x27;Request Header Fields Too Large&#x27;,</span><br><span class="line">  &#x27;451&#x27;: &#x27;Unavailable For Legal Reasons&#x27;,</span><br><span class="line">  &#x27;500&#x27;: &#x27;Internal Server Error&#x27;,</span><br><span class="line">  &#x27;501&#x27;: &#x27;Not Implemented&#x27;,</span><br><span class="line">  &#x27;502&#x27;: &#x27;Bad Gateway&#x27;,</span><br><span class="line">  &#x27;503&#x27;: &#x27;Service Unavailable&#x27;,</span><br><span class="line">  &#x27;504&#x27;: &#x27;Gateway Timeout&#x27;,</span><br><span class="line">  &#x27;505&#x27;: &#x27;HTTP Version Not Supported&#x27;,</span><br><span class="line">  &#x27;506&#x27;: &#x27;Variant Also Negotiates&#x27;,</span><br><span class="line">  &#x27;507&#x27;: &#x27;Insufficient Storage&#x27;,</span><br><span class="line">  &#x27;508&#x27;: &#x27;Loop Detected&#x27;,</span><br><span class="line">  &#x27;509&#x27;: &#x27;Bandwidth Limit Exceeded&#x27;,</span><br><span class="line">  &#x27;510&#x27;: &#x27;Not Extended&#x27;,</span><br><span class="line">  &#x27;511&#x27;: &#x27;Network Authentication Required&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NODEJS</category>
      </categories>
  </entry>
  <entry>
    <title>Docker搭建registry</title>
    <url>/posts/2adf5bb7/</url>
    <content><![CDATA[<p>　　工作中当我们执行docker pull时，它实际上是从registry.hub.docker.com上面去查找，这是官方提供的公共仓库。实际项目中，我们不可能将企业私有镜像push到公共仓库。所以为了更好的管理镜像,docke允许我们搭建本地私有仓库-registry。<br>　　registry使用比较简单，但是管理功能较差。企业级别的私服推荐还是使用harbor提供服务。</p>
<span id="more"></span>

<h2 id="私有仓库搭建"><a href="#私有仓库搭建" class="headerlink" title="私有仓库搭建"></a>私有仓库搭建</h2><h3 id="镜像拉取"><a href="#镜像拉取" class="headerlink" title="镜像拉取"></a>镜像拉取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry:2</span><br></pre></td></tr></table></figure>

<h3 id="创建并启动仓库容器"><a href="#创建并启动仓库容器" class="headerlink" title="创建并启动仓库容器"></a>创建并启动仓库容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name=registry -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure>

<h3 id="访问私有仓库"><a href="#访问私有仓库" class="headerlink" title="访问私有仓库"></a>访问私有仓库</h3><ol>
<li>命令行访问<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ curl localhost:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br></pre></td></tr></table></figure></li>
<li>浏览器访问 <a href="http://localhost:5000/v2/_catalog">http://localhost:5000/v2/_catalog</a><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241628420.png" alt="registry-1"></li>
</ol>
<h3 id="修改daemon-json-让docker信任私有仓库地址"><a href="#修改daemon-json-让docker信任私有仓库地址" class="headerlink" title="修改daemon.json(让docker信任私有仓库地址)"></a>修改daemon.json(让docker信任私有仓库地址)</h3><p><code>如果没有修改daemon.json,可以成功上传镜像，但是无法下载镜像</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim daemon.json</span><br><span class="line"># 添加一下内容</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;localhost:5000&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="上传镜像至私有仓库"><a href="#上传镜像至私有仓库" class="headerlink" title="上传镜像至私有仓库"></a>上传镜像至私有仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ docker images | grep nginx</span><br><span class="line">nginx                                  latest                                                  dd34e67e3371   6 days ago      133MB</span><br><span class="line"></span><br><span class="line">❯ docker tag dd34e67e3371 localhost:5000/nginx:latest</span><br><span class="line"></span><br><span class="line">❯ docker images | grep nginx</span><br><span class="line">nginx                                  latest                                                  dd34e67e3371   6 days ago      133MB</span><br><span class="line">localhost:5000/nginx                   latest                                                  dd34e67e3371   6 days ago      133MB</span><br><span class="line"></span><br><span class="line">❯ docker push localhost:5000/nginx:latest</span><br><span class="line">The push refers to repository [localhost:5000/nginx]</span><br><span class="line">fb04ab8effa8: Pushed</span><br><span class="line">8f736d52032f: Pushed</span><br><span class="line">009f1d338b57: Pushed</span><br><span class="line">678bbd796838: Pushed</span><br><span class="line">d1279c519351: Pushed</span><br><span class="line">f68ef921efae: Pushed</span><br><span class="line">latest: digest: sha256:5e95e5eb8be4322e3b3652d737371705e56809ed8b307ad68ec59ddebaaf60e4 size: 1570</span><br></pre></td></tr></table></figure>

<h3 id="访问私有仓库-again"><a href="#访问私有仓库-again" class="headerlink" title="访问私有仓库-again"></a>访问私有仓库-again</h3><ol>
<li>命令行访问<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ curl localhost:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;nginx&quot;]&#125;</span><br></pre></td></tr></table></figure></li>
<li>浏览器访问 <a href="http://localhost:5000/v2/_catalog">http://localhost:5000/v2/_catalog</a><br><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108241635105.png" alt="registry-2"></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Docker部署gitlab</title>
    <url>/posts/e32bdacf/</url>
    <content><![CDATA[<ul>
<li><a href="#1%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">1.环境准备</a><ul>
<li><a href="#11-%E6%8B%89%E5%8F%96%E6%9C%80%E6%96%B0%E5%AE%B9%E5%99%A8">1.1 拉取最新容器</a></li>
<li><a href="#12-%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8">1.2 构建容器</a><ul>
<li><a href="#121-%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95%E7%94%A8%E4%BA%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">1.2.1 创建目录，用于数据持久化</a></li>
<li><a href="#122-%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8">1.2.2 构建容器</a></li>
<li><a href="#123-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8">1.2.3 查看容器</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2-%E9%85%8D%E7%BD%AEgitlab%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80">2. 配置Gitlab访问地址</a></li>
<li><a href="#3-%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1">3. 访问服务</a></li>
<li><a href="#4-mac%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C">4. mac访问宿主机网络</a></li>
</ul>
<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><h3 id="1-1-拉取最新容器"><a href="#1-1-拉取最新容器" class="headerlink" title="1.1 拉取最新容器"></a>1.1 拉取最新容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<h3 id="1-2-构建容器"><a href="#1-2-构建容器" class="headerlink" title="1.2 构建容器"></a>1.2 构建容器</h3><h4 id="1-2-1-创建目录，用于数据持久化"><a href="#1-2-1-创建目录，用于数据持久化" class="headerlink" title="1.2.1 创建目录，用于数据持久化"></a>1.2.1 创建目录，用于数据持久化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $&#123;gitlab-home&#125;/&#123;data,config,logs&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-2-构建容器"><a href="#1-2-2-构建容器" class="headerlink" title="1.2.2 构建容器"></a>1.2.2 构建容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">-p 443:443 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 22:22 \</span><br><span class="line">--name gitlab --restart always \</span><br><span class="line">-v $&#123;gitlab-home&#125;/config:/etc/gitlab \</span><br><span class="line">-v $&#123;gitlab-home&#125;/logs:/var/log/gitlab \</span><br><span class="line">-v $&#123;gitlab-home&#125;/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>
<h4 id="1-2-3-查看容器"><a href="#1-2-3-查看容器" class="headerlink" title="1.2.3 查看容器"></a>1.2.3 查看容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a | grep gitlab</span><br></pre></td></tr></table></figure>
<h2 id="2-配置Gitlab访问地址"><a href="#2-配置Gitlab访问地址" class="headerlink" title="2. 配置Gitlab访问地址"></a>2. 配置Gitlab访问地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1: 进入容器</span><br><span class="line"># step2: vim /etc/gitlab/gitlab.rb 修改 external_url</span><br><span class="line"># step3: 重启容器</span><br></pre></td></tr></table></figure>
<h2 id="3-访问服务"><a href="#3-访问服务" class="headerlink" title="3. 访问服务"></a>3. 访问服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 管理员默认用户 root</span><br><span class="line">## 管理员默认密码 /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure>
<h2 id="4-mac访问宿主机网络"><a href="#4-mac访问宿主机网络" class="headerlink" title="4. mac访问宿主机网络"></a>4. mac访问宿主机网络</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1: 使用Gitlab管理员账号修改如下配置</span><br><span class="line">Menu =&gt; Admin =&gt; Settings =&gt; Network =&gt; Outbound requests</span><br><span class="line">勾选Allow requests to the local network from web hooks and services</span><br><span class="line"># step2: container中使用docker.for.mac.localhost访问宿主机</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/zhousicong/imagehost/main/img/202108191541954.png" alt="etwork-setting"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>awk-sdk-python验证S3服务</title>
    <url>/posts/5a7446d2/</url>
    <content><![CDATA[<blockquote>
<p>How to use awk-sdk-python to validate access to s3 server</p>
</blockquote>
<ol>
<li><p>Prerequisites<br>Install the AWS SDK for Python from <a href="https://aws.amazon.com/cn/sdk-for-python/">here</a></p>
</li>
<li><p>Example<br>Please replace endpoint_url,aws_access_key_id, aws_secret_access_key, Bucket and Object with your local setup in this example.py file.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line">access_key = <span class="string">&quot;minioadmin&quot;</span></span><br><span class="line">secret_key = <span class="string">&quot;minioadmin&quot;</span></span><br><span class="line">endpoint_url = <span class="string">&quot;http://localhost:9000&quot;</span></span><br><span class="line">bucket_name = <span class="string">&quot;my-bucket&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to s3</span></span><br><span class="line">session = Session(aws_access_key_id=access_key, aws_secret_access_key=secret_key)</span><br><span class="line">s3 = session.resource(<span class="string">&quot;s3&quot;</span>, endpoint_url=endpoint_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># List all the existing buckets</span></span><br><span class="line"><span class="keyword">for</span> bucket <span class="keyword">in</span> s3.buckets.<span class="built_in">all</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bucket name:%s&quot;</span> % bucket.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new bucket</span></span><br><span class="line">s3.create_bucket(Bucket=bucket_name)</span><br><span class="line">bucket = s3.Bucket(bucket_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Upload a file from local file system &#x27;/home/root/file.txt&#x27; to bucket</span></span><br><span class="line">bucket.upload_file(<span class="string">&quot;/home/root/file.txt&quot;</span>, <span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># List all objects</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> bucket.objects.<span class="built_in">all</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;obj name:%s&quot;</span> % obj.key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download the object &#x27;file.txt&#x27; from the bucket and save it to local file system</span></span><br><span class="line">bucket.download_file(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;/tmp/file.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete all the objects</span></span><br><span class="line">bucket.objects.<span class="built_in">filter</span>().delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete bucket</span></span><br><span class="line">bucket.delete()</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>TODO: resource和client的差别</code></p>
]]></content>
      <categories>
        <category>S3</category>
      </categories>
      <tags>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>Work Environment setup</title>
    <url>/posts/27b637df/</url>
    <content><![CDATA[<h3 id="Mac-App"><a href="#Mac-App" class="headerlink" title="Mac App"></a>Mac App</h3><ul>
<li>InsomniaX for Mac (Disable the sleep mode on your Mac)</li>
<li>Karabiner-Elements (改建利器)</li>
<li>Alfred</li>
<li>Spectacle (分屏软件)</li>
<li>dozer (系统栏图标隐藏工具)</li>
<li>Itsycal (日历)</li>
<li>Hammerspoon</li>
<li>PicGo</li>
<li>kubectx</li>
</ul>
<h3 id="vim-conf"><a href="#vim-conf" class="headerlink" title="vim.conf"></a>vim.conf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; 语法高亮</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">&quot; 编码设置</span><br><span class="line">set encoding=utf-8</span><br><span class="line">&quot; 显示匹配</span><br><span class="line">set showmatch</span><br><span class="line">&quot; 显示标尺</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">Plug &#x27;Yggdroot/indentLine&#x27;</span><br><span class="line">Plug &#x27;ayu-theme/ayu-vim&#x27;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; indentLine &#123;&#123;</span><br><span class="line">let g:indentLine_char = &#x27;┆&#x27;</span><br><span class="line">&quot; &#125;&#125;</span><br><span class="line">&quot; ayu-vim &#123;&#123;</span><br><span class="line">set termguicolors</span><br><span class="line">let ayucolor=&quot;dark&quot;</span><br><span class="line">colorscheme ayu</span><br><span class="line">&quot; &#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>版本号命名规则指南</title>
    <url>/posts/6ce3f532/</url>
    <content><![CDATA[<h1 id="版本号命名规则指南"><a href="#版本号命名规则指南" class="headerlink" title="版本号命名规则指南"></a>版本号命名规则指南</h1><h2 id="版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为："><a href="#版本号的格式为-X-Y-Z-又称-Major-Minor-Patch-，递增的规则为：" class="headerlink" title="版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为："></a>版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为：</h2><ul>
<li>X 表示主版本号，当 API 的兼容性变化时，X 需递增。</li>
<li>Y 表示次版本号，当增加功能时(不影响 API 的兼容性)，Y 需递增。</li>
<li>Z 表示修订号，当做 Bug 修复时(不影响 API 的兼容性)，Z 需递增。</li>
</ul>
<h2 id="详细的规则如下："><a href="#详细的规则如下：" class="headerlink" title="详细的规则如下："></a>详细的规则如下：</h2><ol>
<li>X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</li>
<li>0.Y.Z 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；1.0.0 表明版本已有稳定的 API。</li>
<li>当 API 的兼容性变化时，X 必须递增，Y 和 Z 同时设置为 0；当新增功能(不影响 API 的兼容性)或者 API 被标记为 Deprecated 时，Y 必须递增，同时 Z 设置为 0；当进行 bug fix 时，Z 必须递增。</li>
<li>先行版本号(Pre-release)意味该版本不稳定，可能存在兼容性问题，其格式为：X.Y.Z.[a-c][正整数]，如 1.0.0.a1，1.0.0.b99，1.0.0.c1000。</li>
<li>开发版本号常用于 CI-CD，格式为 X.Y.Z.dev[正整数]，如 1.0.1.dev4。</li>
<li>版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 1.0.0 &lt; 1.0.1 &lt; 1.1.1 &lt; 2.0.0；对于先行版本号和开发版本号，有：1.0.0.a100 &lt; 1.0.0，2.1.0.dev3 &lt; 2.1.0；当存在字母时，以 ASCII 的排序来比较，如 1.0.0.a1 &lt; 1.0.0.b1。</li>
<li>注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！</li>
</ol>
<h2 id="一些修饰的词"><a href="#一些修饰的词" class="headerlink" title="一些修饰的词"></a>一些修饰的词</h2><ul>
<li>alpha：内部版本</li>
<li>beta：测试版</li>
<li>demo：演示版</li>
<li>enhance：增强版</li>
<li>free：自由版</li>
<li>full version：完整版，即正式版</li>
<li>lts：长期维护版本</li>
<li>release：发行版</li>
<li>rc：即将作为正式版发布</li>
<li>standard：标准版</li>
<li>ultimate：旗舰版</li>
<li>upgrade：升级版</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
</search>
